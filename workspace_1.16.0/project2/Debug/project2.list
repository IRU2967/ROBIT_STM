
project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003688  08003688  00004688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a0  080036a0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080036a0  080036a0  000046a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036a8  080036a8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036a8  080036a8  000046a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  080036bc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  080036bc  0000516c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d76f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267b  00000000  00000000  000127ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  00014e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d9  00000000  00000000  00015b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d1b  00000000  00000000  000164d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011505  00000000  00000000  000391f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d79cd  00000000  00000000  0004a6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001220c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033f4  00000000  00000000  0012210c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00125500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003670 	.word	0x08003670

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003670 	.word	0x08003670

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000508:	4a37      	ldr	r2, [pc, #220]	@ (80005e8 <MX_ADC1_Init+0xf4>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800050c:	4b35      	ldr	r3, [pc, #212]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 800050e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b33      	ldr	r3, [pc, #204]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800051a:	4b32      	ldr	r3, [pc, #200]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 800051c:	2201      	movs	r2, #1
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b30      	ldr	r3, [pc, #192]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000522:	2200      	movs	r2, #0
 8000524:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b2f      	ldr	r3, [pc, #188]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800052e:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000536:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000538:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800053c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053e:	4b29      	ldr	r3, [pc, #164]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000540:	2200      	movs	r2, #0
 8000542:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000546:	2204      	movs	r2, #4
 8000548:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800054a:	4b26      	ldr	r3, [pc, #152]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 800054c:	2201      	movs	r2, #1
 800054e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000552:	4b24      	ldr	r3, [pc, #144]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000558:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 800055a:	f000 fc5f 	bl	8000e1c <HAL_ADC_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000564:	f000 fa5a 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000570:	2301      	movs	r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000574:	463b      	mov	r3, r7
 8000576:	4619      	mov	r1, r3
 8000578:	481a      	ldr	r0, [pc, #104]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 800057a:	f000 fdc1 	bl	8001100 <HAL_ADC_ConfigChannel>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000584:	f000 fa4a 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000588:	2301      	movs	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800058c:	2302      	movs	r3, #2
 800058e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4813      	ldr	r0, [pc, #76]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 8000596:	f000 fdb3 	bl	8001100 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005a0:	f000 fa3c 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 80005b2:	f000 fda5 	bl	8001100 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80005bc:	f000 fa2e 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_ADC1_Init+0xf0>)
 80005ce:	f000 fd97 	bl	8001100 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80005d8:	f000 fa20 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40012000 	.word	0x40012000

080005ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	@ 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a33      	ldr	r2, [pc, #204]	@ (80006d8 <HAL_ADC_MspInit+0xec>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d15f      	bne.n	80006ce <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	4b32      	ldr	r3, [pc, #200]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000616:	4a31      	ldr	r2, [pc, #196]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 8000618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800061c:	6453      	str	r3, [r2, #68]	@ 0x44
 800061e:	4b2f      	ldr	r3, [pc, #188]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 8000620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	4b2b      	ldr	r3, [pc, #172]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	4a2a      	ldr	r2, [pc, #168]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	@ 0x30
 800063a:	4b28      	ldr	r3, [pc, #160]	@ (80006dc <HAL_ADC_MspInit+0xf0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000646:	230f      	movs	r3, #15
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064a:	2303      	movs	r3, #3
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	4619      	mov	r1, r3
 8000658:	4821      	ldr	r0, [pc, #132]	@ (80006e0 <HAL_ADC_MspInit+0xf4>)
 800065a:	f001 fb85 	bl	8001d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800065e:	4b21      	ldr	r3, [pc, #132]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <HAL_ADC_MspInit+0xfc>)
 8000662:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800067c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000680:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000684:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000688:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800068c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000694:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006a2:	4810      	ldr	r0, [pc, #64]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 80006a4:	f001 f876 	bl	8001794 <HAL_DMA_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80006ae:	f000 f9b5 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 80006b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006b8:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <HAL_ADC_MspInit+0xf8>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2012      	movs	r0, #18
 80006c4:	f001 f82f 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006c8:	2012      	movs	r0, #18
 80006ca:	f001 f848 	bl	800175e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	@ 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40012000 	.word	0x40012000
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000070 	.word	0x20000070
 80006e8:	40026410 	.word	0x40026410

080006ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_DMA_Init+0x3c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <MX_DMA_Init+0x3c>)
 80006fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_DMA_Init+0x3c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2038      	movs	r0, #56	@ 0x38
 8000714:	f001 f807 	bl	8001726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000718:	2038      	movs	r0, #56	@ 0x38
 800071a:	f001 f820 	bl	800175e <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b3e      	ldr	r3, [pc, #248]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a3d      	ldr	r2, [pc, #244]	@ (8000840 <MX_GPIO_Init+0x114>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b3b      	ldr	r3, [pc, #236]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b37      	ldr	r3, [pc, #220]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a36      	ldr	r2, [pc, #216]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b34      	ldr	r3, [pc, #208]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b30      	ldr	r3, [pc, #192]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a2f      	ldr	r2, [pc, #188]	@ (8000840 <MX_GPIO_Init+0x114>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b2d      	ldr	r3, [pc, #180]	@ (8000840 <MX_GPIO_Init+0x114>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <MX_GPIO_Init+0x114>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a28      	ldr	r2, [pc, #160]	@ (8000840 <MX_GPIO_Init+0x114>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <MX_GPIO_Init+0x114>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b22      	ldr	r3, [pc, #136]	@ (8000840 <MX_GPIO_Init+0x114>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a21      	ldr	r2, [pc, #132]	@ (8000840 <MX_GPIO_Init+0x114>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <MX_GPIO_Init+0x114>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007d4:	481b      	ldr	r0, [pc, #108]	@ (8000844 <MX_GPIO_Init+0x118>)
 80007d6:	f001 fc73 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2104      	movs	r1, #4
 80007de:	481a      	ldr	r0, [pc, #104]	@ (8000848 <MX_GPIO_Init+0x11c>)
 80007e0:	f001 fc6e 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_12;
 80007e4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_GPIO_Init+0x118>)
 80007fe:	f001 fab3 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000802:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_GPIO_Init+0x120>)
 8000818:	f001 faa6 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800081c:	2304      	movs	r3, #4
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_GPIO_Init+0x11c>)
 8000834:	f001 fa98 	bl	8001d68 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	@ 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020c00 	.word	0x40020c00
 800084c:	40020400 	.word	0x40020400

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f000 fa70 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f812 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f7ff ff66 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000860:	f7ff ff44 	bl	80006ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000864:	f7ff fe46 	bl	80004f4 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000868:	f000 f9a6 	bl	8000bb8 <MX_TIM8_Init>
  MX_TIM6_Init();
 800086c:	f000 f96e 	bl	8000b4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim6);
 8000870:	4802      	ldr	r0, [pc, #8]	@ (800087c <main+0x2c>)
 8000872:	f002 faab 	bl	8002dcc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000876:	bf00      	nop
 8000878:	e7fd      	b.n	8000876 <main+0x26>
 800087a:	bf00      	nop
 800087c:	200000d8 	.word	0x200000d8

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	@ 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2234      	movs	r2, #52	@ 0x34
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fec2 	bl	8003618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <SystemClock_Config+0xdc>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ac:	4a2b      	ldr	r2, [pc, #172]	@ (800095c <SystemClock_Config+0xdc>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b4:	4b29      	ldr	r3, [pc, #164]	@ (800095c <SystemClock_Config+0xdc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <SystemClock_Config+0xe0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <SystemClock_Config+0xe0>)
 80008ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <SystemClock_Config+0xe0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e0:	2301      	movs	r3, #1
 80008e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e8:	2302      	movs	r3, #2
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008f0:	2308      	movs	r3, #8
 80008f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008f4:	23b4      	movs	r3, #180	@ 0xb4
 80008f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000900:	2302      	movs	r3, #2
 8000902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4618      	mov	r0, r3
 800090a:	f001 ff71 	bl	80027f0 <HAL_RCC_OscConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000914:	f000 f882 	bl	8000a1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000918:	f001 fc06 	bl	8002128 <HAL_PWREx_EnableOverDrive>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000922:	f000 f87b 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000926:	230f      	movs	r3, #15
 8000928:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092a:	2302      	movs	r3, #2
 800092c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000932:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000936:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2105      	movs	r1, #5
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fc3f 	bl	80021c8 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000950:	f000 f864 	bl	8000a1c <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3750      	adds	r7, #80	@ 0x50
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a24      	ldr	r2, [pc, #144]	@ (8000a04 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d141      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x96>
	{

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000976:	2104      	movs	r1, #4
 8000978:	4823      	ldr	r0, [pc, #140]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800097a:	f001 fbba 	bl	80020f2 <HAL_GPIO_TogglePin>
		//GPIOD->ODR ^= GPIO_PIN_2;

		if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)))
 800097e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000982:	4822      	ldr	r0, [pc, #136]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000984:	f001 fb84 	bl	8002090 <HAL_GPIO_ReadPin>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d10e      	bne.n	80009ac <HAL_TIM_PeriodElapsedCallback+0x48>
		{
			count++;
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000996:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800099c:	481d      	ldr	r0, [pc, #116]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800099e:	f001 fba8 	bl	80020f2 <HAL_GPIO_TogglePin>
			count2++;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80009aa:	6013      	str	r3, [r2, #0]
		}

		if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)))
 80009ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009b0:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009b2:	f001 fb6d 	bl	8002090 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0x62>
				{
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80009bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009c0:	4814      	ldr	r0, [pc, #80]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009c2:	f001 fb96 	bl	80020f2 <HAL_GPIO_TogglePin>
				}

		if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)))
 80009c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ca:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009cc:	f001 fb60 	bl	8002090 <HAL_GPIO_ReadPin>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d104      	bne.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0x7c>
				{
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 80009d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009dc:	f001 fb89 	bl	80020f2 <HAL_GPIO_TogglePin>
				}

		if(!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12)))
 80009e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80009e6:	f001 fb53 	bl	8002090 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d104      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x96>
				{
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80009f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80009f6:	f001 fb7c 	bl	80020f2 <HAL_GPIO_TogglePin>
	else if(htim->Instance==TIM6)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
	}*/

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40001000 	.word	0x40001000
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	200000d0 	.word	0x200000d0
 8000a14:	40020800 	.word	0x40020800
 8000a18:	200000d4 	.word	0x200000d4

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f985 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000adc:	4802      	ldr	r0, [pc, #8]	@ (8000ae8 <ADC_IRQHandler+0x10>)
 8000ade:	f000 f9e0 	bl	8000ea2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000028 	.word	0x20000028

08000aec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000af0:	4802      	ldr	r0, [pc, #8]	@ (8000afc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000af2:	f002 f9db 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000120 	.word	0x20000120

08000b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM6_DAC_IRQHandler+0x10>)
 8000b06:	f002 f9d1 	bl	8002eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200000d8 	.word	0x200000d8

08000b14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <DMA2_Stream0_IRQHandler+0x10>)
 8000b1a:	f000 fee9 	bl	80018f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000070 	.word	0x20000070

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b52:	463b      	mov	r3, r7
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b5c:	4a15      	ldr	r2, [pc, #84]	@ (8000bb4 <MX_TIM6_Init+0x68>)
 8000b5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4500-1;
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b62:	f241 1293 	movw	r2, #4499	@ 0x1193
 8000b66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b70:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b7c:	480c      	ldr	r0, [pc, #48]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b7e:	f002 f8d5 	bl	8002d2c <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000b88:	f7ff ff48 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_TIM6_Init+0x64>)
 8000b9a:	f002 fcad 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f7ff ff3a 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000d8 	.word	0x200000d8
 8000bb4:	40001000 	.word	0x40001000

08000bb8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <MX_TIM8_Init+0x9c>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8000bda:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000bdc:	22b3      	movs	r2, #179	@ 0xb3
 8000bde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000be8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c00:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000c02:	f002 f893 	bl	8002d2c <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000c0c:	f7ff ff06 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000c1e:	f002 fa35 	bl	800308c <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000c28:	f7ff fef8 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_TIM8_Init+0x98>)
 8000c3a:	f002 fc5d 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000c44:	f7ff feea 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000120 	.word	0x20000120
 8000c54:	40010400 	.word	0x40010400

08000c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x80>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d116      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	4a1a      	ldr	r2, [pc, #104]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2036      	movs	r0, #54	@ 0x36
 8000c8c:	f000 fd4b 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c90:	2036      	movs	r0, #54	@ 0x36
 8000c92:	f000 fd64 	bl	800175e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000c96:	e01a      	b.n	8000cce <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x88>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d115      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_TIM_Base_MspInit+0x84>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	202c      	movs	r0, #44	@ 0x2c
 8000cc4:	f000 fd2f 	bl	8001726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000cc8:	202c      	movs	r0, #44	@ 0x2c
 8000cca:	f000 fd48 	bl	800175e <HAL_NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40001000 	.word	0x40001000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ce8:	f7ff ff1e 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f002 fc89 	bl	8003628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fd9b 	bl	8000850 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d28:	080036b0 	.word	0x080036b0
  ldr r2, =_sbss
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d30:	2000016c 	.word	0x2000016c

08000d34 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <CAN1_RX0_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	@ (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 fcd5 	bl	8001710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fe5c 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fced 	bl	800177a <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 fcb5 	bl	8001726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	@ (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000168 	.word	0x20000168

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	@ (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000168 	.word	0x20000168

08000e1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e033      	b.n	8000e9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fbd6 	bl	80005ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e62:	f023 0302 	bic.w	r3, r3, #2
 8000e66:	f043 0202 	orr.w	r2, r3, #2
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 fa78 	bl	8001364 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f023 0303 	bic.w	r3, r3, #3
 8000e82:	f043 0201 	orr.w	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e8a:	e001      	b.n	8000e90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d049      	beq.n	8000f6c <HAL_ADC_IRQHandler+0xca>
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d046      	beq.n	8000f6c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d105      	bne.n	8000ef6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d12b      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d127      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d006      	beq.n	8000f28 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d119      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0220 	bic.w	r2, r2, #32
 8000f36:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f54:	f043 0201 	orr.w	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f8b0 	bl	80010c2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f06f 0212 	mvn.w	r2, #18
 8000f6a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d057      	beq.n	8001032 <HAL_ADC_IRQHandler+0x190>
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d054      	beq.n	8001032 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d105      	bne.n	8000fa0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d139      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d12b      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d124      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11d      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d119      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ffc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d105      	bne.n	8001022 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fa9a 	bl	800155c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f06f 020c 	mvn.w	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001040:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d017      	beq.n	8001078 <HAL_ADC_IRQHandler+0x1d6>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d014      	beq.n	8001078 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10d      	bne.n	8001078 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f834 	bl	80010d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f06f 0201 	mvn.w	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0320 	and.w	r3, r3, #32
 800107e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001086:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d015      	beq.n	80010ba <HAL_ADC_IRQHandler+0x218>
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001098:	f043 0202 	orr.w	r2, r3, #2
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f06f 0220 	mvn.w	r2, #32
 80010a8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f81d 	bl	80010ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0220 	mvn.w	r2, #32
 80010b8:	601a      	str	r2, [r3, #0]
  }
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x1c>
 8001118:	2302      	movs	r3, #2
 800111a:	e113      	b.n	8001344 <HAL_ADC_ConfigChannel+0x244>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b09      	cmp	r3, #9
 800112a:	d925      	bls.n	8001178 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68d9      	ldr	r1, [r3, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	b29b      	uxth	r3, r3
 8001138:	461a      	mov	r2, r3
 800113a:	4613      	mov	r3, r2
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	4413      	add	r3, r2
 8001140:	3b1e      	subs	r3, #30
 8001142:	2207      	movs	r2, #7
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43da      	mvns	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	400a      	ands	r2, r1
 8001150:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68d9      	ldr	r1, [r3, #12]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	4603      	mov	r3, r0
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4403      	add	r3, r0
 800116a:	3b1e      	subs	r3, #30
 800116c:	409a      	lsls	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	e022      	b.n	80011be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6919      	ldr	r1, [r3, #16]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	2207      	movs	r2, #7
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	400a      	ands	r2, r1
 800119a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6919      	ldr	r1, [r3, #16]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	4603      	mov	r3, r0
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4403      	add	r3, r0
 80011b4:	409a      	lsls	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d824      	bhi.n	8001210 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	3b05      	subs	r3, #5
 80011d8:	221f      	movs	r2, #31
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	400a      	ands	r2, r1
 80011e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	3b05      	subs	r3, #5
 8001202:	fa00 f203 	lsl.w	r2, r0, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34
 800120e:	e04c      	b.n	80012aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d824      	bhi.n	8001262 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b23      	subs	r3, #35	@ 0x23
 800122a:	221f      	movs	r2, #31
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43da      	mvns	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	400a      	ands	r2, r1
 8001238:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	3b23      	subs	r3, #35	@ 0x23
 8001254:	fa00 f203 	lsl.w	r2, r0, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001260:	e023      	b.n	80012aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	3b41      	subs	r3, #65	@ 0x41
 8001274:	221f      	movs	r2, #31
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	400a      	ands	r2, r1
 8001282:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	3b41      	subs	r3, #65	@ 0x41
 800129e:	fa00 f203 	lsl.w	r2, r0, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_ADC_ConfigChannel+0x250>)
 80012ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_ADC_ConfigChannel+0x254>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10f      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1d8>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b12      	cmp	r3, #18
 80012be:	d10b      	bne.n	80012d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_ADC_ConfigChannel+0x254>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12b      	bne.n	800133a <HAL_ADC_ConfigChannel+0x23a>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001358 <HAL_ADC_ConfigChannel+0x258>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d003      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x1f4>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b11      	cmp	r3, #17
 80012f2:	d122      	bne.n	800133a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <HAL_ADC_ConfigChannel+0x258>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d111      	bne.n	800133a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_ADC_ConfigChannel+0x25c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a11      	ldr	r2, [pc, #68]	@ (8001360 <HAL_ADC_ConfigChannel+0x260>)
 800131c:	fba2 2303 	umull	r2, r3, r2, r3
 8001320:	0c9a      	lsrs	r2, r3, #18
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800132c:	e002      	b.n	8001334 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3b01      	subs	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f9      	bne.n	800132e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	40012300 	.word	0x40012300
 8001354:	40012000 	.word	0x40012000
 8001358:	10000012 	.word	0x10000012
 800135c:	20000000 	.word	0x20000000
 8001360:	431bde83 	.word	0x431bde83

08001364 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136c:	4b79      	ldr	r3, [pc, #484]	@ (8001554 <ADC_Init+0x1f0>)
 800136e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	021a      	lsls	r2, r3, #8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6899      	ldr	r1, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	4a58      	ldr	r2, [pc, #352]	@ (8001558 <ADC_Init+0x1f4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d022      	beq.n	8001442 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800140a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6899      	ldr	r1, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800142c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6899      	ldr	r1, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	e00f      	b.n	8001462 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689a      	ldr	r2, [r3, #8]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001460:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0202 	bic.w	r2, r2, #2
 8001470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6899      	ldr	r1, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
 800147c:	005a      	lsls	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01b      	beq.n	80014c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800149e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6859      	ldr	r1, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	3b01      	subs	r3, #1
 80014bc:	035a      	lsls	r2, r3, #13
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	e007      	b.n	80014d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	051a      	lsls	r2, r3, #20
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800150c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800151a:	025a      	lsls	r2, r3, #9
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	029a      	lsls	r2, r3, #10
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	609a      	str	r2, [r3, #8]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40012300 	.word	0x40012300
 8001558:	0f000001 	.word	0x0f000001

0800155c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4907      	ldr	r1, [pc, #28]	@ (800160c <__NVIC_EnableIRQ+0x38>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016dc:	d301      	bcc.n	80016e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016de:	2301      	movs	r3, #1
 80016e0:	e00f      	b.n	8001702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <SysTick_Config+0x40>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ea:	210f      	movs	r1, #15
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f7ff ff8e 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <SysTick_Config+0x40>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	@ (800170c <SysTick_Config+0x40>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff29 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001726:	b580      	push	{r7, lr}
 8001728:	b086      	sub	sp, #24
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001738:	f7ff ff3e 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 800173c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68b9      	ldr	r1, [r7, #8]
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	f7ff ff8e 	bl	8001664 <NVIC_EncodePriority>
 8001748:	4602      	mov	r2, r0
 800174a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff5d 	bl	8001610 <__NVIC_SetPriority>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff31 	bl	80015d4 <__NVIC_EnableIRQ>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff ffa2 	bl	80016cc <SysTick_Config>
 8001788:	4603      	mov	r3, r0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017a0:	f7ff fb30 	bl	8000e04 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e099      	b.n	80018e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2202      	movs	r2, #2
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d0:	e00f      	b.n	80017f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d2:	f7ff fb17 	bl	8000e04 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d908      	bls.n	80017f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e078      	b.n	80018e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e8      	bne.n	80017d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	4b38      	ldr	r3, [pc, #224]	@ (80018ec <HAL_DMA_Init+0x158>)
 800180c:	4013      	ands	r3, r2
 800180e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800181e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	4313      	orrs	r3, r2
 8001842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	2b04      	cmp	r3, #4
 800184a:	d107      	bne.n	800185c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001854:	4313      	orrs	r3, r2
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4313      	orrs	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f023 0307 	bic.w	r3, r3, #7
 8001872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	2b04      	cmp	r3, #4
 8001884:	d117      	bne.n	80018b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00e      	beq.n	80018b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f9e9 	bl	8001c70 <DMA_CheckFifoParam>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2240      	movs	r2, #64	@ 0x40
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80018b2:	2301      	movs	r3, #1
 80018b4:	e016      	b.n	80018e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f9a0 	bl	8001c04 <DMA_CalcBaseAndBitshift>
 80018c4:	4603      	mov	r3, r0
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018cc:	223f      	movs	r2, #63	@ 0x3f
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	f010803f 	.word	0xf010803f

080018f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018fc:	4b8e      	ldr	r3, [pc, #568]	@ (8001b38 <HAL_DMA_IRQHandler+0x248>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a8e      	ldr	r2, [pc, #568]	@ (8001b3c <HAL_DMA_IRQHandler+0x24c>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	0a9b      	lsrs	r3, r3, #10
 8001908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	2208      	movs	r2, #8
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d01a      	beq.n	800195c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001948:	2208      	movs	r2, #8
 800194a:	409a      	lsls	r2, r3
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001960:	2201      	movs	r2, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d012      	beq.n	8001992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197e:	2201      	movs	r2, #1
 8001980:	409a      	lsls	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800198a:	f043 0202 	orr.w	r2, r3, #2
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001996:	2204      	movs	r2, #4
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b4:	2204      	movs	r2, #4
 80019b6:	409a      	lsls	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c0:	f043 0204 	orr.w	r2, r3, #4
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	2210      	movs	r2, #16
 80019ce:	409a      	lsls	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d043      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03c      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	2210      	movs	r2, #16
 80019ec:	409a      	lsls	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d018      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d024      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
 8001a1e:	e01f      	b.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	4798      	blx	r3
 8001a30:	e016      	b.n	8001a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d107      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0208 	bic.w	r2, r2, #8
 8001a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a64:	2220      	movs	r2, #32
 8001a66:	409a      	lsls	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 808f 	beq.w	8001b90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 8087 	beq.w	8001b90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a86:	2220      	movs	r2, #32
 8001a88:	409a      	lsls	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d136      	bne.n	8001b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0216 	bic.w	r2, r2, #22
 8001aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d103      	bne.n	8001aca <HAL_DMA_IRQHandler+0x1da>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0208 	bic.w	r2, r2, #8
 8001ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	223f      	movs	r2, #63	@ 0x3f
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d07e      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
        }
        return;
 8001b06:	e079      	b.n	8001bfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d01d      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d031      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
 8001b34:	e02c      	b.n	8001b90 <HAL_DMA_IRQHandler+0x2a0>
 8001b36:	bf00      	nop
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d023      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
 8001b50:	e01e      	b.n	8001b90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0210 	bic.w	r2, r2, #16
 8001b6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d032      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d022      	beq.n	8001bea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2205      	movs	r2, #5
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d307      	bcc.n	8001bd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f2      	bne.n	8001bbc <HAL_DMA_IRQHandler+0x2cc>
 8001bd6:	e000      	b.n	8001bda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
 8001bfa:	e000      	b.n	8001bfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8001bfc:	bf00      	nop
    }
  }
}
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3b10      	subs	r3, #16
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <DMA_CalcBaseAndBitshift+0x64>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <DMA_CalcBaseAndBitshift+0x68>)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d909      	bls.n	8001c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	1d1a      	adds	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c44:	e007      	b.n	8001c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	aaaaaaab 	.word	0xaaaaaaab
 8001c6c:	08003698 	.word	0x08003698

08001c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d856      	bhi.n	8001d3e <DMA_CheckFifoParam+0xce>
 8001c90:	a201      	add	r2, pc, #4	@ (adr r2, 8001c98 <DMA_CheckFifoParam+0x28>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001cbb 	.word	0x08001cbb
 8001ca0:	08001ca9 	.word	0x08001ca9
 8001ca4:	08001d3f 	.word	0x08001d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d046      	beq.n	8001d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb8:	e043      	b.n	8001d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cc2:	d140      	bne.n	8001d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cc8:	e03d      	b.n	8001d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd2:	d121      	bne.n	8001d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d837      	bhi.n	8001d4a <DMA_CheckFifoParam+0xda>
 8001cda:	a201      	add	r2, pc, #4	@ (adr r2, 8001ce0 <DMA_CheckFifoParam+0x70>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001cf7 	.word	0x08001cf7
 8001ce8:	08001cf1 	.word	0x08001cf1
 8001cec:	08001d09 	.word	0x08001d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf4:	e030      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d025      	beq.n	8001d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d06:	e022      	b.n	8001d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d10:	d11f      	bne.n	8001d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d16:	e01c      	b.n	8001d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d903      	bls.n	8001d26 <DMA_CheckFifoParam+0xb6>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d003      	beq.n	8001d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d24:	e018      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
      break;
 8001d2a:	e015      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3c:	e00b      	b.n	8001d56 <DMA_CheckFifoParam+0xe6>
      break;
 8001d3e:	bf00      	nop
 8001d40:	e00a      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d42:	bf00      	nop
 8001d44:	e008      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d46:	bf00      	nop
 8001d48:	e006      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4a:	bf00      	nop
 8001d4c:	e004      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d4e:	bf00      	nop
 8001d50:	e002      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <DMA_CheckFifoParam+0xe8>
      break;
 8001d56:	bf00      	nop
    }
  } 
  
  return status; 
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	@ 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e165      	b.n	8002050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 8154 	bne.w	800204a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d130      	bne.n	8001e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df0:	2201      	movs	r2, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 0201 	and.w	r2, r3, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d017      	beq.n	8001e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	2203      	movs	r2, #3
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d123      	bne.n	8001eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	08da      	lsrs	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3208      	adds	r2, #8
 8001e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08da      	lsrs	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	69b9      	ldr	r1, [r7, #24]
 8001ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0203 	and.w	r2, r3, #3
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ae 	beq.w	800204a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efe:	4b5a      	ldr	r3, [pc, #360]	@ (8002068 <HAL_GPIO_Init+0x300>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0a:	4a58      	ldr	r2, [pc, #352]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4f      	ldr	r2, [pc, #316]	@ (8002070 <HAL_GPIO_Init+0x308>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x21a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4e      	ldr	r2, [pc, #312]	@ (8002074 <HAL_GPIO_Init+0x30c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x216>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4d      	ldr	r2, [pc, #308]	@ (8002078 <HAL_GPIO_Init+0x310>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x212>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	@ (800207c <HAL_GPIO_Init+0x314>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x20e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4b      	ldr	r2, [pc, #300]	@ (8002080 <HAL_GPIO_Init+0x318>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x20a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_GPIO_Init+0x31c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_GPIO_Init+0x320>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x202>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00c      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x21c>
 8001f82:	2300      	movs	r3, #0
 8001f84:	69fa      	ldr	r2, [r7, #28]
 8001f86:	f002 0203 	and.w	r2, r2, #3
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	@ (800206c <HAL_GPIO_Init+0x304>)
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff0:	4a26      	ldr	r2, [pc, #152]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_GPIO_Init+0x324>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800201a:	4a1c      	ldr	r2, [pc, #112]	@ (800208c <HAL_GPIO_Init+0x324>)
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002020:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_GPIO_Init+0x324>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002044:	4a11      	ldr	r2, [pc, #68]	@ (800208c <HAL_GPIO_Init+0x324>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3301      	adds	r3, #1
 800204e:	61fb      	str	r3, [r7, #28]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	f67f ae96 	bls.w	8001d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	40021400 	.word	0x40021400
 8002088:	40021800 	.word	0x40021800
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b085      	sub	sp, #20
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002104:	887a      	ldrh	r2, [r7, #2]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	4013      	ands	r3, r2
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43d9      	mvns	r1, r3
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	400b      	ands	r3, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	619a      	str	r2, [r3, #24]
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	@ 0x40
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800214e:	4b1b      	ldr	r3, [pc, #108]	@ (80021bc <HAL_PWREx_EnableOverDrive+0x94>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002154:	f7fe fe56 	bl	8000e04 <HAL_GetTick>
 8002158:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800215a:	e009      	b.n	8002170 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800215c:	f7fe fe52 	bl	8000e04 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800216a:	d901      	bls.n	8002170 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e01f      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002170:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d1ee      	bne.n	800215c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002184:	f7fe fe3e 	bl	8000e04 <HAL_GetTick>
 8002188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800218a:	e009      	b.n	80021a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800218c:	f7fe fe3a 	bl	8000e04 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800219a:	d901      	bls.n	80021a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e007      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021ac:	d1ee      	bne.n	800218c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	420e0040 	.word	0x420e0040
 80021c0:	40007000 	.word	0x40007000
 80021c4:	420e0044 	.word	0x420e0044

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fda4 	bl	8000e04 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7fe fda0 	bl	8000e04 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fd04 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	08003688 	.word	0x08003688
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b0ae      	sub	sp, #184	@ 0xb8
 800239a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ba:	4bcb      	ldr	r3, [pc, #812]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	f200 8204 	bhi.w	80027d0 <HAL_RCC_GetSysClockFreq+0x43c>
 80023c8:	a201      	add	r2, pc, #4	@ (adr r2, 80023d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ce:	bf00      	nop
 80023d0:	08002405 	.word	0x08002405
 80023d4:	080027d1 	.word	0x080027d1
 80023d8:	080027d1 	.word	0x080027d1
 80023dc:	080027d1 	.word	0x080027d1
 80023e0:	0800240d 	.word	0x0800240d
 80023e4:	080027d1 	.word	0x080027d1
 80023e8:	080027d1 	.word	0x080027d1
 80023ec:	080027d1 	.word	0x080027d1
 80023f0:	08002415 	.word	0x08002415
 80023f4:	080027d1 	.word	0x080027d1
 80023f8:	080027d1 	.word	0x080027d1
 80023fc:	080027d1 	.word	0x080027d1
 8002400:	08002605 	.word	0x08002605
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4bb9      	ldr	r3, [pc, #740]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x358>)
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800240a:	e1e5      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800240c:	4bb7      	ldr	r3, [pc, #732]	@ (80026ec <HAL_RCC_GetSysClockFreq+0x358>)
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002412:	e1e1      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002414:	4bb4      	ldr	r3, [pc, #720]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800241c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002420:	4bb1      	ldr	r3, [pc, #708]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d071      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242c:	4bae      	ldr	r3, [pc, #696]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	2200      	movs	r2, #0
 8002434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002438:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800243c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800244e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	f04f 0000 	mov.w	r0, #0
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	0159      	lsls	r1, r3, #5
 8002460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002464:	0150      	lsls	r0, r2, #5
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4621      	mov	r1, r4
 800246c:	1a51      	subs	r1, r2, r1
 800246e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002470:	4629      	mov	r1, r5
 8002472:	eb63 0301 	sbc.w	r3, r3, r1
 8002476:	647b      	str	r3, [r7, #68]	@ 0x44
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002484:	4649      	mov	r1, r9
 8002486:	018b      	lsls	r3, r1, #6
 8002488:	4641      	mov	r1, r8
 800248a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248e:	4641      	mov	r1, r8
 8002490:	018a      	lsls	r2, r1, #6
 8002492:	4641      	mov	r1, r8
 8002494:	1a51      	subs	r1, r2, r1
 8002496:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002498:	4649      	mov	r1, r9
 800249a:	eb63 0301 	sbc.w	r3, r3, r1
 800249e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024ac:	4649      	mov	r1, r9
 80024ae:	00cb      	lsls	r3, r1, #3
 80024b0:	4641      	mov	r1, r8
 80024b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b6:	4641      	mov	r1, r8
 80024b8:	00ca      	lsls	r2, r1, #3
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	4622      	mov	r2, r4
 80024c2:	189b      	adds	r3, r3, r2
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c6:	462b      	mov	r3, r5
 80024c8:	460a      	mov	r2, r1
 80024ca:	eb42 0303 	adc.w	r3, r2, r3
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024dc:	4629      	mov	r1, r5
 80024de:	028b      	lsls	r3, r1, #10
 80024e0:	4621      	mov	r1, r4
 80024e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e6:	4621      	mov	r1, r4
 80024e8:	028a      	lsls	r2, r1, #10
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002500:	f7fd fe80 	bl	8000204 <__aeabi_uldivmod>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4613      	mov	r3, r2
 800250a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800250e:	e067      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002510:	4b75      	ldr	r3, [pc, #468]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800251c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002528:	67bb      	str	r3, [r7, #120]	@ 0x78
 800252a:	2300      	movs	r3, #0
 800252c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800252e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002532:	4622      	mov	r2, r4
 8002534:	462b      	mov	r3, r5
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	0159      	lsls	r1, r3, #5
 8002540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002544:	0150      	lsls	r0, r2, #5
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4621      	mov	r1, r4
 800254c:	1a51      	subs	r1, r2, r1
 800254e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002550:	4629      	mov	r1, r5
 8002552:	eb63 0301 	sbc.w	r3, r3, r1
 8002556:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002564:	4649      	mov	r1, r9
 8002566:	018b      	lsls	r3, r1, #6
 8002568:	4641      	mov	r1, r8
 800256a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256e:	4641      	mov	r1, r8
 8002570:	018a      	lsls	r2, r1, #6
 8002572:	4641      	mov	r1, r8
 8002574:	ebb2 0a01 	subs.w	sl, r2, r1
 8002578:	4649      	mov	r1, r9
 800257a:	eb63 0b01 	sbc.w	fp, r3, r1
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800258a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800258e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002592:	4692      	mov	sl, r2
 8002594:	469b      	mov	fp, r3
 8002596:	4623      	mov	r3, r4
 8002598:	eb1a 0303 	adds.w	r3, sl, r3
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	462b      	mov	r3, r5
 80025a0:	eb4b 0303 	adc.w	r3, fp, r3
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025b2:	4629      	mov	r1, r5
 80025b4:	028b      	lsls	r3, r1, #10
 80025b6:	4621      	mov	r1, r4
 80025b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025bc:	4621      	mov	r1, r4
 80025be:	028a      	lsls	r2, r1, #10
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c8:	2200      	movs	r2, #0
 80025ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80025cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80025ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025d2:	f7fd fe17 	bl	8000204 <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4613      	mov	r3, r2
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e0:	4b41      	ldr	r3, [pc, #260]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80025f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002602:	e0e9      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002604:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800260c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002610:	4b35      	ldr	r3, [pc, #212]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d069      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b32      	ldr	r3, [pc, #200]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	2200      	movs	r2, #0
 8002624:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800262a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002630:	2300      	movs	r3, #0
 8002632:	667b      	str	r3, [r7, #100]	@ 0x64
 8002634:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002638:	4622      	mov	r2, r4
 800263a:	462b      	mov	r3, r5
 800263c:	f04f 0000 	mov.w	r0, #0
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	0159      	lsls	r1, r3, #5
 8002646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264a:	0150      	lsls	r0, r2, #5
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4621      	mov	r1, r4
 8002652:	1a51      	subs	r1, r2, r1
 8002654:	61b9      	str	r1, [r7, #24]
 8002656:	4629      	mov	r1, r5
 8002658:	eb63 0301 	sbc.w	r3, r3, r1
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800266a:	4659      	mov	r1, fp
 800266c:	018b      	lsls	r3, r1, #6
 800266e:	4651      	mov	r1, sl
 8002670:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002674:	4651      	mov	r1, sl
 8002676:	018a      	lsls	r2, r1, #6
 8002678:	4651      	mov	r1, sl
 800267a:	ebb2 0801 	subs.w	r8, r2, r1
 800267e:	4659      	mov	r1, fp
 8002680:	eb63 0901 	sbc.w	r9, r3, r1
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002690:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002694:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002698:	4690      	mov	r8, r2
 800269a:	4699      	mov	r9, r3
 800269c:	4623      	mov	r3, r4
 800269e:	eb18 0303 	adds.w	r3, r8, r3
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	462b      	mov	r3, r5
 80026a6:	eb49 0303 	adc.w	r3, r9, r3
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026b8:	4629      	mov	r1, r5
 80026ba:	028b      	lsls	r3, r1, #10
 80026bc:	4621      	mov	r1, r4
 80026be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c2:	4621      	mov	r1, r4
 80026c4:	028a      	lsls	r2, r1, #10
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ce:	2200      	movs	r2, #0
 80026d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026d8:	f7fd fd94 	bl	8000204 <__aeabi_uldivmod>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4613      	mov	r3, r2
 80026e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026e6:	e063      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x41c>
 80026e8:	40023800 	.word	0x40023800
 80026ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f0:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x454>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	2200      	movs	r2, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	4611      	mov	r1, r2
 80026fc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002700:	653b      	str	r3, [r7, #80]	@ 0x50
 8002702:	2300      	movs	r3, #0
 8002704:	657b      	str	r3, [r7, #84]	@ 0x54
 8002706:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800270a:	4642      	mov	r2, r8
 800270c:	464b      	mov	r3, r9
 800270e:	f04f 0000 	mov.w	r0, #0
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	0159      	lsls	r1, r3, #5
 8002718:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800271c:	0150      	lsls	r0, r2, #5
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4641      	mov	r1, r8
 8002724:	1a51      	subs	r1, r2, r1
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	4649      	mov	r1, r9
 800272a:	eb63 0301 	sbc.w	r3, r3, r1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800273c:	4659      	mov	r1, fp
 800273e:	018b      	lsls	r3, r1, #6
 8002740:	4651      	mov	r1, sl
 8002742:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002746:	4651      	mov	r1, sl
 8002748:	018a      	lsls	r2, r1, #6
 800274a:	4651      	mov	r1, sl
 800274c:	1a54      	subs	r4, r2, r1
 800274e:	4659      	mov	r1, fp
 8002750:	eb63 0501 	sbc.w	r5, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	00eb      	lsls	r3, r5, #3
 800275e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002762:	00e2      	lsls	r2, r4, #3
 8002764:	4614      	mov	r4, r2
 8002766:	461d      	mov	r5, r3
 8002768:	4643      	mov	r3, r8
 800276a:	18e3      	adds	r3, r4, r3
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	464b      	mov	r3, r9
 8002770:	eb45 0303 	adc.w	r3, r5, r3
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002782:	4629      	mov	r1, r5
 8002784:	028b      	lsls	r3, r1, #10
 8002786:	4621      	mov	r1, r4
 8002788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800278c:	4621      	mov	r1, r4
 800278e:	028a      	lsls	r2, r1, #10
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002798:	2200      	movs	r2, #0
 800279a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800279c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800279e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027a2:	f7fd fd2f 	bl	8000204 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4613      	mov	r3, r2
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x454>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	0f1b      	lsrs	r3, r3, #28
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80027be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ce:	e003      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <HAL_RCC_GetSysClockFreq+0x458>)
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	37b8      	adds	r7, #184	@ 0xb8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400

080027f0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e28d      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8083 	beq.w	8002916 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002810:	4b94      	ldr	r3, [pc, #592]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b04      	cmp	r3, #4
 800281a:	d019      	beq.n	8002850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800281c:	4b91      	ldr	r3, [pc, #580]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002824:	2b08      	cmp	r3, #8
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002828:	4b8e      	ldr	r3, [pc, #568]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002830:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4b8b      	ldr	r3, [pc, #556]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b88      	ldr	r3, [pc, #544]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b84      	ldr	r3, [pc, #528]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x124>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e25a      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x90>
 8002872:	4b7c      	ldr	r3, [pc, #496]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7b      	ldr	r2, [pc, #492]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xcc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0xb4>
 800288a:	4b76      	ldr	r3, [pc, #472]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a75      	ldr	r2, [pc, #468]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b73      	ldr	r3, [pc, #460]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a72      	ldr	r2, [pc, #456]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xcc>
 80028a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6e      	ldr	r2, [pc, #440]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fa9e 	bl	8000e04 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7fe fa9a 	bl	8000e04 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	@ 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e21f      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b61      	ldr	r3, [pc, #388]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xdc>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ec:	f7fe fa8a 	bl	8000e04 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7fe fa86 	bl	8000e04 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	@ 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e20b      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b57      	ldr	r3, [pc, #348]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0x104>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d06f      	beq.n	8002a02 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002922:	4b50      	ldr	r3, [pc, #320]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d017      	beq.n	800295e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800292e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d105      	bne.n	8002946 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800293a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b44      	ldr	r3, [pc, #272]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x186>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1d3      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3b      	ldr	r3, [pc, #236]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4937      	ldr	r1, [pc, #220]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b34      	ldr	r3, [pc, #208]	@ (8002a68 <HAL_RCC_OscConfig+0x278>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fa33 	bl	8000e04 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe fa2f 	bl	8000e04 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1b4      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b28      	ldr	r3, [pc, #160]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4925      	ldr	r1, [pc, #148]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCC_OscConfig+0x278>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fa12 	bl	8000e04 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e4:	f7fe fa0e 	bl	8000e04 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e193      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d036      	beq.n	8002a7c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1c:	f7fe f9f2 	bl	8000e04 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe f9ee 	bl	8000e04 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e173      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <HAL_RCC_OscConfig+0x274>)
 8002a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x234>
 8002a42:	e01b      	b.n	8002a7c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <HAL_RCC_OscConfig+0x27c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe f9db 	bl	8000e04 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a50:	e00e      	b.n	8002a70 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fe f9d7 	bl	8000e04 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d907      	bls.n	8002a70 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e15c      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	42470000 	.word	0x42470000
 8002a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b8a      	ldr	r3, [pc, #552]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ea      	bne.n	8002a52 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8097 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b83      	ldr	r3, [pc, #524]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10f      	bne.n	8002aba <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <HAL_RCC_OscConfig+0x4b0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d118      	bne.n	8002af8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac6:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <HAL_RCC_OscConfig+0x4b0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a75      	ldr	r2, [pc, #468]	@ (8002ca0 <HAL_RCC_OscConfig+0x4b0>)
 8002acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe f997 	bl	8000e04 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ada:	f7fe f993 	bl	8000e04 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e118      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ca0 <HAL_RCC_OscConfig+0x4b0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x31e>
 8002b00:	4b66      	ldr	r3, [pc, #408]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b04:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0c:	e01c      	b.n	8002b48 <HAL_RCC_OscConfig+0x358>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x340>
 8002b16:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1a:	4a60      	ldr	r2, [pc, #384]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b22:	4b5e      	ldr	r3, [pc, #376]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	4a5d      	ldr	r2, [pc, #372]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x358>
 8002b30:	4b5a      	ldr	r3, [pc, #360]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b34:	4a59      	ldr	r2, [pc, #356]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3c:	4b57      	ldr	r3, [pc, #348]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a56      	ldr	r2, [pc, #344]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	f023 0304 	bic.w	r3, r3, #4
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe f958 	bl	8000e04 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe f954 	bl	8000e04 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0d7      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0ee      	beq.n	8002b58 <HAL_RCC_OscConfig+0x368>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7c:	f7fe f942 	bl	8000e04 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b82:	e00a      	b.n	8002b9a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe f93e 	bl	8000e04 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0c1      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9a:	4b40      	ldr	r3, [pc, #256]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba6:	7dfb      	ldrb	r3, [r7, #23]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80ad 	beq.w	8002d1c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc2:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d060      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d145      	bne.n	8002c62 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b33      	ldr	r3, [pc, #204]	@ (8002ca4 <HAL_RCC_OscConfig+0x4b4>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f912 	bl	8000e04 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f90e 	bl	8000e04 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e093      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	019b      	lsls	r3, r3, #6
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	071b      	lsls	r3, r3, #28
 8002c2e:	491b      	ldr	r1, [pc, #108]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4b4>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f8e3 	bl	8000e04 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe f8df 	bl	8000e04 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e064      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x452>
 8002c60:	e05c      	b.n	8002d1c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <HAL_RCC_OscConfig+0x4b4>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f8cc 	bl	8000e04 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe f8c8 	bl	8000e04 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04d      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <HAL_RCC_OscConfig+0x4ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x480>
 8002c8e:	e045      	b.n	8002d1c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e040      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <HAL_RCC_OscConfig+0x538>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d030      	beq.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d129      	bne.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d122      	bne.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d119      	bne.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d10f      	bne.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023800 	.word	0x40023800

08002d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e041      	b.n	8002dc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd ff80 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3304      	adds	r3, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f000 fa7e 	bl	800326c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d001      	beq.n	8002de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e04e      	b.n	8002e82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a23      	ldr	r2, [pc, #140]	@ (8002e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d01d      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a1c      	ldr	r2, [pc, #112]	@ (8002e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0x80>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a18      	ldr	r2, [pc, #96]	@ (8002ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d111      	bne.n	8002e70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b06      	cmp	r3, #6
 8002e5c:	d010      	beq.n	8002e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e6e:	e007      	b.n	8002e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40001800 	.word	0x40001800

08002eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d020      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0202 	mvn.w	r2, #2
 8002ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f999 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f98b 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f99c 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d020      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0204 	mvn.w	r2, #4
 8002f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 f973 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f965 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f976 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d020      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d01b      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0208 	mvn.w	r2, #8
 8002f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f94d 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002f94:	e005      	b.n	8002fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f93f 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f950 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d020      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0210 	mvn.w	r2, #16
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f927 	bl	800322e <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f919 	bl	800321a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f92a 	bl	8003242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fca6 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fae4 	bl	8003604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8fb 	bl	8003256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00c      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0220 	mvn.w	r2, #32
 800307c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fab6 	bl	80035f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_TIM_ConfigClockSource+0x1c>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e0b4      	b.n	8003212 <HAL_TIM_ConfigClockSource+0x186>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e0:	d03e      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0xd4>
 80030e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e6:	f200 8087 	bhi.w	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	f000 8086 	beq.w	80031fe <HAL_TIM_ConfigClockSource+0x172>
 80030f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f6:	d87f      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b70      	cmp	r3, #112	@ 0x70
 80030fa:	d01a      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xa6>
 80030fc:	2b70      	cmp	r3, #112	@ 0x70
 80030fe:	d87b      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b60      	cmp	r3, #96	@ 0x60
 8003102:	d050      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003104:	2b60      	cmp	r3, #96	@ 0x60
 8003106:	d877      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b50      	cmp	r3, #80	@ 0x50
 800310a:	d03c      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0xfa>
 800310c:	2b50      	cmp	r3, #80	@ 0x50
 800310e:	d873      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	d058      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	d86f      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b30      	cmp	r3, #48	@ 0x30
 800311a:	d064      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	2b30      	cmp	r3, #48	@ 0x30
 800311e:	d86b      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b20      	cmp	r3, #32
 8003122:	d060      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003124:	2b20      	cmp	r3, #32
 8003126:	d867      	bhi.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05c      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 800312c:	2b10      	cmp	r3, #16
 800312e:	d05a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003130:	e062      	b.n	80031f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003142:	f000 f9b9 	bl	80034b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003154:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]
      break;
 800315e:	e04f      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003170:	f000 f9a2 	bl	80034b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003182:	609a      	str	r2, [r3, #8]
      break;
 8003184:	e03c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	f000 f916 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2150      	movs	r1, #80	@ 0x50
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f96f 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031a4:	e02c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 f935 	bl	8003422 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2160      	movs	r1, #96	@ 0x60
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f95f 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031c4:	e01c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d2:	461a      	mov	r2, r3
 80031d4:	f000 f8f6 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2140      	movs	r1, #64	@ 0x40
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f94f 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031e4:	e00c      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f000 f946 	bl	8003482 <TIM_ITRx_SetConfig>
      break;
 80031f6:	e003      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
      break;
 80031fc:	e000      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a46      	ldr	r2, [pc, #280]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328a:	d00f      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a43      	ldr	r2, [pc, #268]	@ (800339c <TIM_Base_SetConfig+0x130>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00b      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a42      	ldr	r2, [pc, #264]	@ (80033a0 <TIM_Base_SetConfig+0x134>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d007      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a41      	ldr	r2, [pc, #260]	@ (80033a4 <TIM_Base_SetConfig+0x138>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d003      	beq.n	80032ac <TIM_Base_SetConfig+0x40>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a40      	ldr	r2, [pc, #256]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d108      	bne.n	80032be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a35      	ldr	r2, [pc, #212]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032cc:	d027      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a32      	ldr	r2, [pc, #200]	@ (800339c <TIM_Base_SetConfig+0x130>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d023      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a31      	ldr	r2, [pc, #196]	@ (80033a0 <TIM_Base_SetConfig+0x134>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a30      	ldr	r2, [pc, #192]	@ (80033a4 <TIM_Base_SetConfig+0x138>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a2e      	ldr	r2, [pc, #184]	@ (80033ac <TIM_Base_SetConfig+0x140>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a2d      	ldr	r2, [pc, #180]	@ (80033b0 <TIM_Base_SetConfig+0x144>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a2c      	ldr	r2, [pc, #176]	@ (80033b4 <TIM_Base_SetConfig+0x148>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <TIM_Base_SetConfig+0x14c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2a      	ldr	r2, [pc, #168]	@ (80033bc <TIM_Base_SetConfig+0x150>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a29      	ldr	r2, [pc, #164]	@ (80033c0 <TIM_Base_SetConfig+0x154>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a10      	ldr	r2, [pc, #64]	@ (8003398 <TIM_Base_SetConfig+0x12c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_Base_SetConfig+0xf8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <TIM_Base_SetConfig+0x13c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d103      	bne.n	800336c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	611a      	str	r2, [r3, #16]
  }
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	40001800 	.word	0x40001800
 80033bc:	40001c00 	.word	0x40001c00
 80033c0:	40002000 	.word	0x40002000

080033c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 030a 	bic.w	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 0210 	bic.w	r2, r3, #16
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800344c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	031b      	lsls	r3, r3, #12
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800345e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f043 0307 	orr.w	r3, r3, #7
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
 80034c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	021a      	lsls	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	431a      	orrs	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e05a      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a21      	ldr	r2, [pc, #132]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355c:	d01d      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1d      	ldr	r2, [pc, #116]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	@ (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40010400 	.word	0x40010400
 80035e8:	40014000 	.word	0x40014000
 80035ec:	40001800 	.word	0x40001800

080035f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <memset>:
 8003618:	4402      	add	r2, r0
 800361a:	4603      	mov	r3, r0
 800361c:	4293      	cmp	r3, r2
 800361e:	d100      	bne.n	8003622 <memset+0xa>
 8003620:	4770      	bx	lr
 8003622:	f803 1b01 	strb.w	r1, [r3], #1
 8003626:	e7f9      	b.n	800361c <memset+0x4>

08003628 <__libc_init_array>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4d0d      	ldr	r5, [pc, #52]	@ (8003660 <__libc_init_array+0x38>)
 800362c:	4c0d      	ldr	r4, [pc, #52]	@ (8003664 <__libc_init_array+0x3c>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	2600      	movs	r6, #0
 8003634:	42a6      	cmp	r6, r4
 8003636:	d109      	bne.n	800364c <__libc_init_array+0x24>
 8003638:	4d0b      	ldr	r5, [pc, #44]	@ (8003668 <__libc_init_array+0x40>)
 800363a:	4c0c      	ldr	r4, [pc, #48]	@ (800366c <__libc_init_array+0x44>)
 800363c:	f000 f818 	bl	8003670 <_init>
 8003640:	1b64      	subs	r4, r4, r5
 8003642:	10a4      	asrs	r4, r4, #2
 8003644:	2600      	movs	r6, #0
 8003646:	42a6      	cmp	r6, r4
 8003648:	d105      	bne.n	8003656 <__libc_init_array+0x2e>
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003650:	4798      	blx	r3
 8003652:	3601      	adds	r6, #1
 8003654:	e7ee      	b.n	8003634 <__libc_init_array+0xc>
 8003656:	f855 3b04 	ldr.w	r3, [r5], #4
 800365a:	4798      	blx	r3
 800365c:	3601      	adds	r6, #1
 800365e:	e7f2      	b.n	8003646 <__libc_init_array+0x1e>
 8003660:	080036a8 	.word	0x080036a8
 8003664:	080036a8 	.word	0x080036a8
 8003668:	080036a8 	.word	0x080036a8
 800366c:	080036ac 	.word	0x080036ac

08003670 <_init>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	bf00      	nop
 8003674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003676:	bc08      	pop	{r3}
 8003678:	469e      	mov	lr, r3
 800367a:	4770      	bx	lr

0800367c <_fini>:
 800367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367e:	bf00      	nop
 8003680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003682:	bc08      	pop	{r3}
 8003684:	469e      	mov	lr, r3
 8003686:	4770      	bx	lr
