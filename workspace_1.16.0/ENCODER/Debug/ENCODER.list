
ENCODER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004860  08004860  00005860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004878  08004878  00006014  2**0
                  CONTENTS
  4 .ARM          00000008  08004878  08004878  00005878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004880  08004880  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004880  08004880  00005880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004884  08004884  00005884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004888  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000018  0800489c  00006018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  0800489c  0000620c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc8c  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247d  00000000  00000000  00012cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00015150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a8  00000000  00000000  00015de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b2f  00000000  00000000  00016790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107a5  00000000  00000000  000392bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7863  00000000  00000000  00049a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001212c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033fc  00000000  00000000  0012130c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00124708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004848 	.word	0x08004848

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08004848 	.word	0x08004848

08000208 <__aeabi_dmul>:
 8000208:	b570      	push	{r4, r5, r6, lr}
 800020a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800020e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000212:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000216:	bf1d      	ittte	ne
 8000218:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800021c:	ea94 0f0c 	teqne	r4, ip
 8000220:	ea95 0f0c 	teqne	r5, ip
 8000224:	f000 f8de 	bleq	80003e4 <__aeabi_dmul+0x1dc>
 8000228:	442c      	add	r4, r5
 800022a:	ea81 0603 	eor.w	r6, r1, r3
 800022e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000232:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000236:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800023a:	bf18      	it	ne
 800023c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000240:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000248:	d038      	beq.n	80002bc <__aeabi_dmul+0xb4>
 800024a:	fba0 ce02 	umull	ip, lr, r0, r2
 800024e:	f04f 0500 	mov.w	r5, #0
 8000252:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000256:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800025a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800025e:	f04f 0600 	mov.w	r6, #0
 8000262:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000266:	f09c 0f00 	teq	ip, #0
 800026a:	bf18      	it	ne
 800026c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000270:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000274:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000278:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800027c:	d204      	bcs.n	8000288 <__aeabi_dmul+0x80>
 800027e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000282:	416d      	adcs	r5, r5
 8000284:	eb46 0606 	adc.w	r6, r6, r6
 8000288:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800028c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000290:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000294:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000298:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800029c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002a0:	bf88      	it	hi
 80002a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002a6:	d81e      	bhi.n	80002e6 <__aeabi_dmul+0xde>
 80002a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002c0:	ea46 0101 	orr.w	r1, r6, r1
 80002c4:	ea40 0002 	orr.w	r0, r0, r2
 80002c8:	ea81 0103 	eor.w	r1, r1, r3
 80002cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002d0:	bfc2      	ittt	gt
 80002d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002da:	bd70      	popgt	{r4, r5, r6, pc}
 80002dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002e0:	f04f 0e00 	mov.w	lr, #0
 80002e4:	3c01      	subs	r4, #1
 80002e6:	f300 80ab 	bgt.w	8000440 <__aeabi_dmul+0x238>
 80002ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ee:	bfde      	ittt	le
 80002f0:	2000      	movle	r0, #0
 80002f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002f6:	bd70      	pople	{r4, r5, r6, pc}
 80002f8:	f1c4 0400 	rsb	r4, r4, #0
 80002fc:	3c20      	subs	r4, #32
 80002fe:	da35      	bge.n	800036c <__aeabi_dmul+0x164>
 8000300:	340c      	adds	r4, #12
 8000302:	dc1b      	bgt.n	800033c <__aeabi_dmul+0x134>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f305 	lsl.w	r3, r0, r5
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f205 	lsl.w	r2, r1, r5
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000320:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000328:	fa21 f604 	lsr.w	r6, r1, r4
 800032c:	eb42 0106 	adc.w	r1, r2, r6
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 040c 	rsb	r4, r4, #12
 8000340:	f1c4 0520 	rsb	r5, r4, #32
 8000344:	fa00 f304 	lsl.w	r3, r0, r4
 8000348:	fa20 f005 	lsr.w	r0, r0, r5
 800034c:	fa01 f204 	lsl.w	r2, r1, r4
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000358:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f1c4 0520 	rsb	r5, r4, #32
 8000370:	fa00 f205 	lsl.w	r2, r0, r5
 8000374:	ea4e 0e02 	orr.w	lr, lr, r2
 8000378:	fa20 f304 	lsr.w	r3, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea43 0302 	orr.w	r3, r3, r2
 8000384:	fa21 f004 	lsr.w	r0, r1, r4
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	fa21 f204 	lsr.w	r2, r1, r4
 8000390:	ea20 0002 	bic.w	r0, r0, r2
 8000394:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f094 0f00 	teq	r4, #0
 80003a8:	d10f      	bne.n	80003ca <__aeabi_dmul+0x1c2>
 80003aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003ae:	0040      	lsls	r0, r0, #1
 80003b0:	eb41 0101 	adc.w	r1, r1, r1
 80003b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3c01      	subeq	r4, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1a6>
 80003be:	ea41 0106 	orr.w	r1, r1, r6
 80003c2:	f095 0f00 	teq	r5, #0
 80003c6:	bf18      	it	ne
 80003c8:	4770      	bxne	lr
 80003ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	eb43 0303 	adc.w	r3, r3, r3
 80003d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3d01      	subeq	r5, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1c6>
 80003de:	ea43 0306 	orr.w	r3, r3, r6
 80003e2:	4770      	bx	lr
 80003e4:	ea94 0f0c 	teq	r4, ip
 80003e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ec:	bf18      	it	ne
 80003ee:	ea95 0f0c 	teqne	r5, ip
 80003f2:	d00c      	beq.n	800040e <__aeabi_dmul+0x206>
 80003f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f8:	bf18      	it	ne
 80003fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fe:	d1d1      	bne.n	80003a4 <__aeabi_dmul+0x19c>
 8000400:	ea81 0103 	eor.w	r1, r1, r3
 8000404:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000408:	f04f 0000 	mov.w	r0, #0
 800040c:	bd70      	pop	{r4, r5, r6, pc}
 800040e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000412:	bf06      	itte	eq
 8000414:	4610      	moveq	r0, r2
 8000416:	4619      	moveq	r1, r3
 8000418:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041c:	d019      	beq.n	8000452 <__aeabi_dmul+0x24a>
 800041e:	ea94 0f0c 	teq	r4, ip
 8000422:	d102      	bne.n	800042a <__aeabi_dmul+0x222>
 8000424:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000428:	d113      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800042a:	ea95 0f0c 	teq	r5, ip
 800042e:	d105      	bne.n	800043c <__aeabi_dmul+0x234>
 8000430:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000434:	bf1c      	itt	ne
 8000436:	4610      	movne	r0, r2
 8000438:	4619      	movne	r1, r3
 800043a:	d10a      	bne.n	8000452 <__aeabi_dmul+0x24a>
 800043c:	ea81 0103 	eor.w	r1, r1, r3
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000448:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800044c:	f04f 0000 	mov.w	r0, #0
 8000450:	bd70      	pop	{r4, r5, r6, pc}
 8000452:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000456:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800045a:	bd70      	pop	{r4, r5, r6, pc}

0800045c <__aeabi_drsub>:
 800045c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000460:	e002      	b.n	8000468 <__adddf3>
 8000462:	bf00      	nop

08000464 <__aeabi_dsub>:
 8000464:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000468 <__adddf3>:
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800046e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000472:	ea94 0f05 	teq	r4, r5
 8000476:	bf08      	it	eq
 8000478:	ea90 0f02 	teqeq	r0, r2
 800047c:	bf1f      	itttt	ne
 800047e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000482:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000486:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800048a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048e:	f000 80e2 	beq.w	8000656 <__adddf3+0x1ee>
 8000492:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000496:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800049a:	bfb8      	it	lt
 800049c:	426d      	neglt	r5, r5
 800049e:	dd0c      	ble.n	80004ba <__adddf3+0x52>
 80004a0:	442c      	add	r4, r5
 80004a2:	ea80 0202 	eor.w	r2, r0, r2
 80004a6:	ea81 0303 	eor.w	r3, r1, r3
 80004aa:	ea82 0000 	eor.w	r0, r2, r0
 80004ae:	ea83 0101 	eor.w	r1, r3, r1
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	2d36      	cmp	r5, #54	@ 0x36
 80004bc:	bf88      	it	hi
 80004be:	bd30      	pophi	{r4, r5, pc}
 80004c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004d0:	d002      	beq.n	80004d8 <__adddf3+0x70>
 80004d2:	4240      	negs	r0, r0
 80004d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x84>
 80004e6:	4252      	negs	r2, r2
 80004e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ec:	ea94 0f05 	teq	r4, r5
 80004f0:	f000 80a7 	beq.w	8000642 <__adddf3+0x1da>
 80004f4:	f1a4 0401 	sub.w	r4, r4, #1
 80004f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004fc:	db0d      	blt.n	800051a <__adddf3+0xb2>
 80004fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000502:	fa22 f205 	lsr.w	r2, r2, r5
 8000506:	1880      	adds	r0, r0, r2
 8000508:	f141 0100 	adc.w	r1, r1, #0
 800050c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000510:	1880      	adds	r0, r0, r2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	4159      	adcs	r1, r3
 8000518:	e00e      	b.n	8000538 <__adddf3+0xd0>
 800051a:	f1a5 0520 	sub.w	r5, r5, #32
 800051e:	f10e 0e20 	add.w	lr, lr, #32
 8000522:	2a01      	cmp	r2, #1
 8000524:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000528:	bf28      	it	cs
 800052a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	18c0      	adds	r0, r0, r3
 8000534:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	d507      	bpl.n	800054e <__adddf3+0xe6>
 800053e:	f04f 0e00 	mov.w	lr, #0
 8000542:	f1dc 0c00 	rsbs	ip, ip, #0
 8000546:	eb7e 0000 	sbcs.w	r0, lr, r0
 800054a:	eb6e 0101 	sbc.w	r1, lr, r1
 800054e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000552:	d31b      	bcc.n	800058c <__adddf3+0x124>
 8000554:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000558:	d30c      	bcc.n	8000574 <__adddf3+0x10c>
 800055a:	0849      	lsrs	r1, r1, #1
 800055c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000560:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000564:	f104 0401 	add.w	r4, r4, #1
 8000568:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800056c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000570:	f080 809a 	bcs.w	80006a8 <__adddf3+0x240>
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	ea41 0105 	orr.w	r1, r1, r5
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000590:	4140      	adcs	r0, r0
 8000592:	eb41 0101 	adc.w	r1, r1, r1
 8000596:	3c01      	subs	r4, #1
 8000598:	bf28      	it	cs
 800059a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800059e:	d2e9      	bcs.n	8000574 <__adddf3+0x10c>
 80005a0:	f091 0f00 	teq	r1, #0
 80005a4:	bf04      	itt	eq
 80005a6:	4601      	moveq	r1, r0
 80005a8:	2000      	moveq	r0, #0
 80005aa:	fab1 f381 	clz	r3, r1
 80005ae:	bf08      	it	eq
 80005b0:	3320      	addeq	r3, #32
 80005b2:	f1a3 030b 	sub.w	r3, r3, #11
 80005b6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ba:	da0c      	bge.n	80005d6 <__adddf3+0x16e>
 80005bc:	320c      	adds	r2, #12
 80005be:	dd08      	ble.n	80005d2 <__adddf3+0x16a>
 80005c0:	f102 0c14 	add.w	ip, r2, #20
 80005c4:	f1c2 020c 	rsb	r2, r2, #12
 80005c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005cc:	fa21 f102 	lsr.w	r1, r1, r2
 80005d0:	e00c      	b.n	80005ec <__adddf3+0x184>
 80005d2:	f102 0214 	add.w	r2, r2, #20
 80005d6:	bfd8      	it	le
 80005d8:	f1c2 0c20 	rsble	ip, r2, #32
 80005dc:	fa01 f102 	lsl.w	r1, r1, r2
 80005e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005e4:	bfdc      	itt	le
 80005e6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ea:	4090      	lslle	r0, r2
 80005ec:	1ae4      	subs	r4, r4, r3
 80005ee:	bfa2      	ittt	ge
 80005f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005f4:	4329      	orrge	r1, r5
 80005f6:	bd30      	popge	{r4, r5, pc}
 80005f8:	ea6f 0404 	mvn.w	r4, r4
 80005fc:	3c1f      	subs	r4, #31
 80005fe:	da1c      	bge.n	800063a <__adddf3+0x1d2>
 8000600:	340c      	adds	r4, #12
 8000602:	dc0e      	bgt.n	8000622 <__adddf3+0x1ba>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0220 	rsb	r2, r4, #32
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f302 	lsl.w	r3, r1, r2
 8000614:	ea40 0003 	orr.w	r0, r0, r3
 8000618:	fa21 f304 	lsr.w	r3, r1, r4
 800061c:	ea45 0103 	orr.w	r1, r5, r3
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f1c4 040c 	rsb	r4, r4, #12
 8000626:	f1c4 0220 	rsb	r2, r4, #32
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 f304 	lsl.w	r3, r1, r4
 8000632:	ea40 0003 	orr.w	r0, r0, r3
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	fa21 f004 	lsr.w	r0, r1, r4
 800063e:	4629      	mov	r1, r5
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f094 0f00 	teq	r4, #0
 8000646:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800064a:	bf06      	itte	eq
 800064c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000650:	3401      	addeq	r4, #1
 8000652:	3d01      	subne	r5, #1
 8000654:	e74e      	b.n	80004f4 <__adddf3+0x8c>
 8000656:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800065a:	bf18      	it	ne
 800065c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000660:	d029      	beq.n	80006b6 <__adddf3+0x24e>
 8000662:	ea94 0f05 	teq	r4, r5
 8000666:	bf08      	it	eq
 8000668:	ea90 0f02 	teqeq	r0, r2
 800066c:	d005      	beq.n	800067a <__adddf3+0x212>
 800066e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000672:	bf04      	itt	eq
 8000674:	4619      	moveq	r1, r3
 8000676:	4610      	moveq	r0, r2
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	ea91 0f03 	teq	r1, r3
 800067e:	bf1e      	ittt	ne
 8000680:	2100      	movne	r1, #0
 8000682:	2000      	movne	r0, #0
 8000684:	bd30      	popne	{r4, r5, pc}
 8000686:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800068a:	d105      	bne.n	8000698 <__adddf3+0x230>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	4149      	adcs	r1, r1
 8000690:	bf28      	it	cs
 8000692:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800069c:	bf3c      	itt	cc
 800069e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006a2:	bd30      	popcc	{r4, r5, pc}
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006b0:	f04f 0000 	mov.w	r0, #0
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ba:	bf1a      	itte	ne
 80006bc:	4619      	movne	r1, r3
 80006be:	4610      	movne	r0, r2
 80006c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006c4:	bf1c      	itt	ne
 80006c6:	460b      	movne	r3, r1
 80006c8:	4602      	movne	r2, r0
 80006ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ce:	bf06      	itte	eq
 80006d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006d4:	ea91 0f03 	teqeq	r1, r3
 80006d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop

080006e0 <__aeabi_ui2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f4:	f04f 0500 	mov.w	r5, #0
 80006f8:	f04f 0100 	mov.w	r1, #0
 80006fc:	e750      	b.n	80005a0 <__adddf3+0x138>
 80006fe:	bf00      	nop

08000700 <__aeabi_i2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000714:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000718:	bf48      	it	mi
 800071a:	4240      	negmi	r0, r0
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	e73e      	b.n	80005a0 <__adddf3+0x138>
 8000722:	bf00      	nop

08000724 <__aeabi_f2d>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800072a:	ea4f 0131 	mov.w	r1, r1, rrx
 800072e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000732:	bf1f      	itttt	ne
 8000734:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000738:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800073c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000740:	4770      	bxne	lr
 8000742:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000746:	bf08      	it	eq
 8000748:	4770      	bxeq	lr
 800074a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800074e:	bf04      	itt	eq
 8000750:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000754:	4770      	bxeq	lr
 8000756:	b530      	push	{r4, r5, lr}
 8000758:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	e71c      	b.n	80005a0 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_ul2d>:
 8000768:	ea50 0201 	orrs.w	r2, r0, r1
 800076c:	bf08      	it	eq
 800076e:	4770      	bxeq	lr
 8000770:	b530      	push	{r4, r5, lr}
 8000772:	f04f 0500 	mov.w	r5, #0
 8000776:	e00a      	b.n	800078e <__aeabi_l2d+0x16>

08000778 <__aeabi_l2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000786:	d502      	bpl.n	800078e <__aeabi_l2d+0x16>
 8000788:	4240      	negs	r0, r0
 800078a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800078e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000792:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000796:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800079a:	f43f aed8 	beq.w	800054e <__adddf3+0xe6>
 800079e:	f04f 0203 	mov.w	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ae:	bf18      	it	ne
 80007b0:	3203      	addne	r2, #3
 80007b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007b6:	f1c2 0320 	rsb	r3, r2, #32
 80007ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007c6:	ea40 000e 	orr.w	r0, r0, lr
 80007ca:	fa21 f102 	lsr.w	r1, r1, r2
 80007ce:	4414      	add	r4, r2
 80007d0:	e6bd      	b.n	800054e <__adddf3+0xe6>
 80007d2:	bf00      	nop

080007d4 <__aeabi_d2uiz>:
 80007d4:	004a      	lsls	r2, r1, #1
 80007d6:	d211      	bcs.n	80007fc <__aeabi_d2uiz+0x28>
 80007d8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007dc:	d211      	bcs.n	8000802 <__aeabi_d2uiz+0x2e>
 80007de:	d50d      	bpl.n	80007fc <__aeabi_d2uiz+0x28>
 80007e0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007e8:	d40e      	bmi.n	8000808 <__aeabi_d2uiz+0x34>
 80007ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007f6:	fa23 f002 	lsr.w	r0, r3, r2
 80007fa:	4770      	bx	lr
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	4770      	bx	lr
 8000802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000806:	d102      	bne.n	800080e <__aeabi_d2uiz+0x3a>
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	4770      	bx	lr
 800080e:	f04f 0000 	mov.w	r0, #0
 8000812:	4770      	bx	lr

08000814 <__aeabi_uldivmod>:
 8000814:	b953      	cbnz	r3, 800082c <__aeabi_uldivmod+0x18>
 8000816:	b94a      	cbnz	r2, 800082c <__aeabi_uldivmod+0x18>
 8000818:	2900      	cmp	r1, #0
 800081a:	bf08      	it	eq
 800081c:	2800      	cmpeq	r0, #0
 800081e:	bf1c      	itt	ne
 8000820:	f04f 31ff 	movne.w	r1, #4294967295
 8000824:	f04f 30ff 	movne.w	r0, #4294967295
 8000828:	f000 b96a 	b.w	8000b00 <__aeabi_idiv0>
 800082c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000830:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000834:	f000 f806 	bl	8000844 <__udivmoddi4>
 8000838:	f8dd e004 	ldr.w	lr, [sp, #4]
 800083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000840:	b004      	add	sp, #16
 8000842:	4770      	bx	lr

08000844 <__udivmoddi4>:
 8000844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000848:	9d08      	ldr	r5, [sp, #32]
 800084a:	460c      	mov	r4, r1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d14e      	bne.n	80008ee <__udivmoddi4+0xaa>
 8000850:	4694      	mov	ip, r2
 8000852:	458c      	cmp	ip, r1
 8000854:	4686      	mov	lr, r0
 8000856:	fab2 f282 	clz	r2, r2
 800085a:	d962      	bls.n	8000922 <__udivmoddi4+0xde>
 800085c:	b14a      	cbz	r2, 8000872 <__udivmoddi4+0x2e>
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	4091      	lsls	r1, r2
 8000864:	fa20 f303 	lsr.w	r3, r0, r3
 8000868:	fa0c fc02 	lsl.w	ip, ip, r2
 800086c:	4319      	orrs	r1, r3
 800086e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000872:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000876:	fa1f f68c 	uxth.w	r6, ip
 800087a:	fbb1 f4f7 	udiv	r4, r1, r7
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb07 1114 	mls	r1, r7, r4, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb04 f106 	mul.w	r1, r4, r6
 800088e:	4299      	cmp	r1, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x64>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f104 30ff 	add.w	r0, r4, #4294967295
 800089a:	f080 8112 	bcs.w	8000ac2 <__udivmoddi4+0x27e>
 800089e:	4299      	cmp	r1, r3
 80008a0:	f240 810f 	bls.w	8000ac2 <__udivmoddi4+0x27e>
 80008a4:	3c02      	subs	r4, #2
 80008a6:	4463      	add	r3, ip
 80008a8:	1a59      	subs	r1, r3, r1
 80008aa:	fa1f f38e 	uxth.w	r3, lr
 80008ae:	fbb1 f0f7 	udiv	r0, r1, r7
 80008b2:	fb07 1110 	mls	r1, r7, r0, r1
 80008b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008ba:	fb00 f606 	mul.w	r6, r0, r6
 80008be:	429e      	cmp	r6, r3
 80008c0:	d90a      	bls.n	80008d8 <__udivmoddi4+0x94>
 80008c2:	eb1c 0303 	adds.w	r3, ip, r3
 80008c6:	f100 31ff 	add.w	r1, r0, #4294967295
 80008ca:	f080 80fc 	bcs.w	8000ac6 <__udivmoddi4+0x282>
 80008ce:	429e      	cmp	r6, r3
 80008d0:	f240 80f9 	bls.w	8000ac6 <__udivmoddi4+0x282>
 80008d4:	4463      	add	r3, ip
 80008d6:	3802      	subs	r0, #2
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008de:	2100      	movs	r1, #0
 80008e0:	b11d      	cbz	r5, 80008ea <__udivmoddi4+0xa6>
 80008e2:	40d3      	lsrs	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d905      	bls.n	80008fe <__udivmoddi4+0xba>
 80008f2:	b10d      	cbz	r5, 80008f8 <__udivmoddi4+0xb4>
 80008f4:	e9c5 0100 	strd	r0, r1, [r5]
 80008f8:	2100      	movs	r1, #0
 80008fa:	4608      	mov	r0, r1
 80008fc:	e7f5      	b.n	80008ea <__udivmoddi4+0xa6>
 80008fe:	fab3 f183 	clz	r1, r3
 8000902:	2900      	cmp	r1, #0
 8000904:	d146      	bne.n	8000994 <__udivmoddi4+0x150>
 8000906:	42a3      	cmp	r3, r4
 8000908:	d302      	bcc.n	8000910 <__udivmoddi4+0xcc>
 800090a:	4290      	cmp	r0, r2
 800090c:	f0c0 80f0 	bcc.w	8000af0 <__udivmoddi4+0x2ac>
 8000910:	1a86      	subs	r6, r0, r2
 8000912:	eb64 0303 	sbc.w	r3, r4, r3
 8000916:	2001      	movs	r0, #1
 8000918:	2d00      	cmp	r5, #0
 800091a:	d0e6      	beq.n	80008ea <__udivmoddi4+0xa6>
 800091c:	e9c5 6300 	strd	r6, r3, [r5]
 8000920:	e7e3      	b.n	80008ea <__udivmoddi4+0xa6>
 8000922:	2a00      	cmp	r2, #0
 8000924:	f040 8090 	bne.w	8000a48 <__udivmoddi4+0x204>
 8000928:	eba1 040c 	sub.w	r4, r1, ip
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	fa1f f78c 	uxth.w	r7, ip
 8000934:	2101      	movs	r1, #1
 8000936:	fbb4 f6f8 	udiv	r6, r4, r8
 800093a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093e:	fb08 4416 	mls	r4, r8, r6, r4
 8000942:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000946:	fb07 f006 	mul.w	r0, r7, r6
 800094a:	4298      	cmp	r0, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x11c>
 800094e:	eb1c 0303 	adds.w	r3, ip, r3
 8000952:	f106 34ff 	add.w	r4, r6, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x11a>
 8000958:	4298      	cmp	r0, r3
 800095a:	f200 80cd 	bhi.w	8000af8 <__udivmoddi4+0x2b4>
 800095e:	4626      	mov	r6, r4
 8000960:	1a1c      	subs	r4, r3, r0
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb4 f0f8 	udiv	r0, r4, r8
 800096a:	fb08 4410 	mls	r4, r8, r0, r4
 800096e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000972:	fb00 f707 	mul.w	r7, r0, r7
 8000976:	429f      	cmp	r7, r3
 8000978:	d908      	bls.n	800098c <__udivmoddi4+0x148>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000982:	d202      	bcs.n	800098a <__udivmoddi4+0x146>
 8000984:	429f      	cmp	r7, r3
 8000986:	f200 80b0 	bhi.w	8000aea <__udivmoddi4+0x2a6>
 800098a:	4620      	mov	r0, r4
 800098c:	1bdb      	subs	r3, r3, r7
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	e7a5      	b.n	80008e0 <__udivmoddi4+0x9c>
 8000994:	f1c1 0620 	rsb	r6, r1, #32
 8000998:	408b      	lsls	r3, r1
 800099a:	fa22 f706 	lsr.w	r7, r2, r6
 800099e:	431f      	orrs	r7, r3
 80009a0:	fa20 fc06 	lsr.w	ip, r0, r6
 80009a4:	fa04 f301 	lsl.w	r3, r4, r1
 80009a8:	ea43 030c 	orr.w	r3, r3, ip
 80009ac:	40f4      	lsrs	r4, r6
 80009ae:	fa00 f801 	lsl.w	r8, r0, r1
 80009b2:	0c38      	lsrs	r0, r7, #16
 80009b4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80009b8:	fbb4 fef0 	udiv	lr, r4, r0
 80009bc:	fa1f fc87 	uxth.w	ip, r7
 80009c0:	fb00 441e 	mls	r4, r0, lr, r4
 80009c4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009c8:	fb0e f90c 	mul.w	r9, lr, ip
 80009cc:	45a1      	cmp	r9, r4
 80009ce:	fa02 f201 	lsl.w	r2, r2, r1
 80009d2:	d90a      	bls.n	80009ea <__udivmoddi4+0x1a6>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009da:	f080 8084 	bcs.w	8000ae6 <__udivmoddi4+0x2a2>
 80009de:	45a1      	cmp	r9, r4
 80009e0:	f240 8081 	bls.w	8000ae6 <__udivmoddi4+0x2a2>
 80009e4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	eba4 0409 	sub.w	r4, r4, r9
 80009ee:	fa1f f983 	uxth.w	r9, r3
 80009f2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009f6:	fb00 4413 	mls	r4, r0, r3, r4
 80009fa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009fe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a02:	45a4      	cmp	ip, r4
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x1d2>
 8000a06:	193c      	adds	r4, r7, r4
 8000a08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a0c:	d267      	bcs.n	8000ade <__udivmoddi4+0x29a>
 8000a0e:	45a4      	cmp	ip, r4
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0x29a>
 8000a12:	3b02      	subs	r3, #2
 8000a14:	443c      	add	r4, r7
 8000a16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000a1e:	eba4 040c 	sub.w	r4, r4, ip
 8000a22:	429c      	cmp	r4, r3
 8000a24:	46ce      	mov	lr, r9
 8000a26:	469c      	mov	ip, r3
 8000a28:	d351      	bcc.n	8000ace <__udivmoddi4+0x28a>
 8000a2a:	d04e      	beq.n	8000aca <__udivmoddi4+0x286>
 8000a2c:	b155      	cbz	r5, 8000a44 <__udivmoddi4+0x200>
 8000a2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000a32:	eb64 040c 	sbc.w	r4, r4, ip
 8000a36:	fa04 f606 	lsl.w	r6, r4, r6
 8000a3a:	40cb      	lsrs	r3, r1
 8000a3c:	431e      	orrs	r6, r3
 8000a3e:	40cc      	lsrs	r4, r1
 8000a40:	e9c5 6400 	strd	r6, r4, [r5]
 8000a44:	2100      	movs	r1, #0
 8000a46:	e750      	b.n	80008ea <__udivmoddi4+0xa6>
 8000a48:	f1c2 0320 	rsb	r3, r2, #32
 8000a4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a54:	fa24 f303 	lsr.w	r3, r4, r3
 8000a58:	4094      	lsls	r4, r2
 8000a5a:	430c      	orrs	r4, r1
 8000a5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a64:	fa1f f78c 	uxth.w	r7, ip
 8000a68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a70:	0c23      	lsrs	r3, r4, #16
 8000a72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a76:	fb00 f107 	mul.w	r1, r0, r7
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	d908      	bls.n	8000a90 <__udivmoddi4+0x24c>
 8000a7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a86:	d22c      	bcs.n	8000ae2 <__udivmoddi4+0x29e>
 8000a88:	4299      	cmp	r1, r3
 8000a8a:	d92a      	bls.n	8000ae2 <__udivmoddi4+0x29e>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4463      	add	r3, ip
 8000a90:	1a5b      	subs	r3, r3, r1
 8000a92:	b2a4      	uxth	r4, r4
 8000a94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a98:	fb08 3311 	mls	r3, r8, r1, r3
 8000a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa0:	fb01 f307 	mul.w	r3, r1, r7
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	d908      	bls.n	8000aba <__udivmoddi4+0x276>
 8000aa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000aac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ab0:	d213      	bcs.n	8000ada <__udivmoddi4+0x296>
 8000ab2:	42a3      	cmp	r3, r4
 8000ab4:	d911      	bls.n	8000ada <__udivmoddi4+0x296>
 8000ab6:	3902      	subs	r1, #2
 8000ab8:	4464      	add	r4, ip
 8000aba:	1ae4      	subs	r4, r4, r3
 8000abc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ac0:	e739      	b.n	8000936 <__udivmoddi4+0xf2>
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	e6f0      	b.n	80008a8 <__udivmoddi4+0x64>
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e706      	b.n	80008d8 <__udivmoddi4+0x94>
 8000aca:	45c8      	cmp	r8, r9
 8000acc:	d2ae      	bcs.n	8000a2c <__udivmoddi4+0x1e8>
 8000ace:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ad6:	3801      	subs	r0, #1
 8000ad8:	e7a8      	b.n	8000a2c <__udivmoddi4+0x1e8>
 8000ada:	4631      	mov	r1, r6
 8000adc:	e7ed      	b.n	8000aba <__udivmoddi4+0x276>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	e799      	b.n	8000a16 <__udivmoddi4+0x1d2>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e7d4      	b.n	8000a90 <__udivmoddi4+0x24c>
 8000ae6:	46d6      	mov	lr, sl
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1a6>
 8000aea:	4463      	add	r3, ip
 8000aec:	3802      	subs	r0, #2
 8000aee:	e74d      	b.n	800098c <__udivmoddi4+0x148>
 8000af0:	4606      	mov	r6, r0
 8000af2:	4623      	mov	r3, r4
 8000af4:	4608      	mov	r0, r1
 8000af6:	e70f      	b.n	8000918 <__udivmoddi4+0xd4>
 8000af8:	3e02      	subs	r6, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	e730      	b.n	8000960 <__udivmoddi4+0x11c>
 8000afe:	bf00      	nop

08000b00 <__aeabi_idiv0>:
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b16:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b18:	4a37      	ldr	r2, [pc, #220]	@ (8000bf8 <MX_ADC1_Init+0xf4>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b1c:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b24:	4b33      	ldr	r3, [pc, #204]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b2a:	4b32      	ldr	r3, [pc, #200]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b30:	4b30      	ldr	r3, [pc, #192]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b36:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000b46:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b48:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4e:	4b29      	ldr	r3, [pc, #164]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000b54:	4b27      	ldr	r3, [pc, #156]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b56:	2204      	movs	r2, #4
 8000b58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b5a:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b62:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b68:	4822      	ldr	r0, [pc, #136]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b6a:	f000 fdff 	bl	800176c <HAL_ADC_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b74:	f000 fa42 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b80:	2301      	movs	r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	481a      	ldr	r0, [pc, #104]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000b8a:	f000 fe33 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b94:	f000 fa32 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000ba6:	f000 fe25 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000bb0:	f000 fa24 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bc2:	f000 fe17 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000bcc:	f000 fa16 	bl	8000ffc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_ADC1_Init+0xf0>)
 8000bde:	f000 fe09 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000be8:	f000 fa08 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000034 	.word	0x20000034
 8000bf8:	40012000 	.word	0x40012000

08000bfc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2f      	ldr	r2, [pc, #188]	@ (8000cd8 <HAL_ADC_MspInit+0xdc>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d157      	bne.n	8000cce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a2d      	ldr	r2, [pc, #180]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a26      	ldr	r2, [pc, #152]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b24      	ldr	r3, [pc, #144]	@ (8000cdc <HAL_ADC_MspInit+0xe0>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c56:	230f      	movs	r3, #15
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	481d      	ldr	r0, [pc, #116]	@ (8000ce0 <HAL_ADC_MspInit+0xe4>)
 8000c6a:	f001 fbed 	bl	8002448 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c70:	4a1d      	ldr	r2, [pc, #116]	@ (8000ce8 <HAL_ADC_MspInit+0xec>)
 8000c72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b18      	ldr	r3, [pc, #96]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c90:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c96:	4b13      	ldr	r3, [pc, #76]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000c98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb2:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000cb4:	f001 f8de 	bl	8001e74 <HAL_DMA_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000cbe:	f000 f99d 	bl	8000ffc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000cc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_ADC_MspInit+0xe8>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000
 8000ce4:	2000007c 	.word	0x2000007c
 8000ce8:	40026410 	.word	0x40026410

08000cec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_DMA_Init+0x3c>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <MX_DMA_Init+0x3c>)
 8000cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_DMA_Init+0x3c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2038      	movs	r0, #56	@ 0x38
 8000d14:	f001 f877 	bl	8001e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d18:	2038      	movs	r0, #56	@ 0x38
 8000d1a:	f001 f890 	bl	8001e3e <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <MX_GPIO_Init>:
        * EXTI
     PB8   ------> S_TIM2_CH1_ETR
     PB9   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b47      	ldr	r3, [pc, #284]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a46      	ldr	r2, [pc, #280]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f003 0304 	and.w	r3, r3, #4
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b40      	ldr	r3, [pc, #256]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	4a3f      	ldr	r2, [pc, #252]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b39      	ldr	r3, [pc, #228]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a38      	ldr	r2, [pc, #224]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b32      	ldr	r3, [pc, #200]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	4a2a      	ldr	r2, [pc, #168]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_GPIO_Init+0x138>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 4173 	mov.w	r1, #62208	@ 0xf300
 8000dd4:	4824      	ldr	r0, [pc, #144]	@ (8000e68 <MX_GPIO_Init+0x13c>)
 8000dd6:	f001 fccb 	bl	8002770 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2104      	movs	r1, #4
 8000dde:	4823      	ldr	r0, [pc, #140]	@ (8000e6c <MX_GPIO_Init+0x140>)
 8000de0:	f001 fcc6 	bl	8002770 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC8
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 8000de4:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 8000de8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481a      	ldr	r0, [pc, #104]	@ (8000e68 <MX_GPIO_Init+0x13c>)
 8000dfe:	f001 fb23 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e02:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <MX_GPIO_Init+0x144>)
 8000e18:	f001 fb16 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <MX_GPIO_Init+0x140>)
 8000e34:	f001 fb08 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <MX_GPIO_Init+0x144>)
 8000e56:	f001 faf7 	bl	8002448 <HAL_GPIO_Init>

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020800 	.word	0x40020800
 8000e6c:	40020c00 	.word	0x40020c00
 8000e70:	40020400 	.word	0x40020400
 8000e74:	00000000 	.word	0x00000000

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b598      	push	{r3, r4, r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fc04 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f84a 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f7ff ff52 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e88:	f7ff ff30 	bl	8000cec <MX_DMA_Init>
  MX_ADC1_Init();
 8000e8c:	f7ff fe3a 	bl	8000b04 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000e90:	f000 fa78 	bl	8001384 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000e94:	f000 fa40 	bl	8001318 <MX_TIM6_Init>
  MX_TIM1_Init();
 8000e98:	f000 f966 	bl	8001168 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e9c:	f000 f9e8 	bl	8001270 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <main+0x88>)
 8000ea4:	f002 fb1e 	bl	80034e4 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4815      	ldr	r0, [pc, #84]	@ (8000f00 <main+0x88>)
 8000eac:	f003 fade 	bl	800446c <HAL_TIMEx_PWMN_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000eb0:	213c      	movs	r1, #60	@ 0x3c
 8000eb2:	4814      	ldr	r0, [pc, #80]	@ (8000f04 <main+0x8c>)
 8000eb4:	f002 fc84 	bl	80037c0 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  encoder_value = TIM3->CNT;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <main+0x90>)
 8000eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc0f 	bl	80006e0 <__aeabi_ui2d>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	4911      	ldr	r1, [pc, #68]	@ (8000f0c <main+0x94>)
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
	  TIM1->CCR1=1000000*variable1;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <main+0x98>)
 8000ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ed2:	a309      	add	r3, pc, #36	@ (adr r3, 8000ef8 <main+0x80>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	f7ff f996 	bl	8000208 <__aeabi_dmul>
 8000edc:	4602      	mov	r2, r0
 8000ede:	460b      	mov	r3, r1
 8000ee0:	4c0c      	ldr	r4, [pc, #48]	@ (8000f14 <main+0x9c>)
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fc75 	bl	80007d4 <__aeabi_d2uiz>
 8000eea:	4603      	mov	r3, r0
 8000eec:	6363      	str	r3, [r4, #52]	@ 0x34
	  encoder_value = TIM3->CNT;
 8000eee:	bf00      	nop
 8000ef0:	e7e2      	b.n	8000eb8 <main+0x40>
 8000ef2:	bf00      	nop
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	412e8480 	.word	0x412e8480
 8000f00:	200000e8 	.word	0x200000e8
 8000f04:	20000130 	.word	0x20000130
 8000f08:	40000400 	.word	0x40000400
 8000f0c:	200000e0 	.word	0x200000e0
 8000f10:	20000000 	.word	0x20000000
 8000f14:	40010000 	.word	0x40010000

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	@ 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	2234      	movs	r2, #52	@ 0x34
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fc61 	bl	80047ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <SystemClock_Config+0xdc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <SystemClock_Config+0xe0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <SystemClock_Config+0xe0>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <SystemClock_Config+0xe0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f74:	2302      	movs	r3, #2
 8000f76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f88:	2308      	movs	r3, #8
 8000f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f8c:	23b4      	movs	r3, #180	@ 0xb4
 8000f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f90:	2302      	movs	r3, #2
 8000f92:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 ff63 	bl	8002e6c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fac:	f000 f826 	bl	8000ffc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb0:	f001 fbf8 	bl	80027a4 <HAL_PWREx_EnableOverDrive>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fba:	f000 f81f 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	2105      	movs	r1, #5
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f001 fc31 	bl	8002844 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe8:	f000 f808 	bl	8000ffc <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3750      	adds	r7, #80	@ 0x50
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40007000 	.word	0x40007000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <HAL_MspInit+0x4c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <UsageFault_Handler+0x4>

08001080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ae:	f000 fb3d 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010bc:	4802      	ldr	r0, [pc, #8]	@ (80010c8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010be:	f002 fc0d 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000e8 	.word	0x200000e8

080010cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010d0:	4802      	ldr	r0, [pc, #8]	@ (80010dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010d2:	f002 fc03 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200000e8 	.word	0x200000e8

080010e0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80010e6:	f002 fbf9 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000e8 	.word	0x200000e8

080010f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f8:	4802      	ldr	r0, [pc, #8]	@ (8001104 <TIM1_CC_IRQHandler+0x10>)
 80010fa:	f002 fbef 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200000e8 	.word	0x200000e8

08001108 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800110c:	4802      	ldr	r0, [pc, #8]	@ (8001118 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800110e:	f002 fbe5 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001c0 	.word	0x200001c0

0800111c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <TIM6_DAC_IRQHandler+0x10>)
 8001122:	f002 fbdb 	bl	80038dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000178 	.word	0x20000178

08001130 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <DMA2_Stream0_IRQHandler+0x10>)
 8001136:	f000 ff4b 	bl	8001fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000007c 	.word	0x2000007c

08001144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <SystemInit+0x20>)
 800114a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800114e:	4a05      	ldr	r2, [pc, #20]	@ (8001164 <SystemInit+0x20>)
 8001150:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001154:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001178:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2220      	movs	r2, #32
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fb2b 	bl	80047ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <MX_TIM1_Init+0x100>)
 800119a:	4a34      	ldr	r2, [pc, #208]	@ (800126c <MX_TIM1_Init+0x104>)
 800119c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9-1;
 800119e:	4b32      	ldr	r3, [pc, #200]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b30      	ldr	r3, [pc, #192]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80011aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011c4:	4828      	ldr	r0, [pc, #160]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011c6:	f002 f93e 	bl	8003446 <HAL_TIM_PWM_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011d0:	f7ff ff14 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011e0:	4619      	mov	r1, r3
 80011e2:	4821      	ldr	r0, [pc, #132]	@ (8001268 <MX_TIM1_Init+0x100>)
 80011e4:	f003 f9fc 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f7ff ff05 	bl	8000ffc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f2:	2360      	movs	r3, #96	@ 0x60
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800120a:	2300      	movs	r3, #0
 800120c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	4619      	mov	r1, r3
 8001216:	4814      	ldr	r0, [pc, #80]	@ (8001268 <MX_TIM1_Init+0x100>)
 8001218:	f002 fc50 	bl	8003abc <HAL_TIM_PWM_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001222:	f7ff feeb 	bl	8000ffc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800123a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800123e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <MX_TIM1_Init+0x100>)
 800124a:	f003 fa45 	bl	80046d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001254:	f7ff fed2 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001258:	4803      	ldr	r0, [pc, #12]	@ (8001268 <MX_TIM1_Init+0x100>)
 800125a:	f000 f9b1 	bl	80015c0 <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3748      	adds	r7, #72	@ 0x48
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200000e8 	.word	0x200000e8
 800126c:	40010000 	.word	0x40010000

08001270 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2224      	movs	r2, #36	@ 0x24
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fab5 	bl	80047ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_TIM3_Init+0xa0>)
 800128e:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <MX_TIM3_Init+0xa4>)
 8001290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_TIM3_Init+0xa0>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1d      	ldr	r3, [pc, #116]	@ (8001310 <MX_TIM3_Init+0xa0>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_TIM3_Init+0xa0>)
 80012a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_TIM3_Init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_TIM3_Init+0xa0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b2:	2303      	movs	r3, #3
 80012b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ba:	2301      	movs	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80012c2:	2305      	movs	r3, #5
 80012c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ca:	2301      	movs	r3, #1
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80012d2:	2305      	movs	r3, #5
 80012d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <MX_TIM3_Init+0xa0>)
 80012de:	f002 f9c9 	bl	8003674 <HAL_TIM_Encoder_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012e8:	f7ff fe88 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_TIM3_Init+0xa0>)
 80012fa:	f003 f971 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001304:	f7ff fe7a 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3730      	adds	r7, #48	@ 0x30
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000130 	.word	0x20000130
 8001314:	40000400 	.word	0x40000400

08001318 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <MX_TIM6_Init+0x64>)
 8001328:	4a15      	ldr	r2, [pc, #84]	@ (8001380 <MX_TIM6_Init+0x68>)
 800132a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4500-1;
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <MX_TIM6_Init+0x64>)
 800132e:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001332:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_TIM6_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_TIM6_Init+0x64>)
 800133c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001340:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_TIM6_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM6_Init+0x64>)
 800134a:	f002 f82d 	bl	80033a8 <HAL_TIM_Base_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001354:	f7ff fe52 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001358:	2300      	movs	r3, #0
 800135a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_TIM6_Init+0x64>)
 8001366:	f003 f93b 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001370:	f7ff fe44 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000178 	.word	0x20000178
 8001380:	40001000 	.word	0x40001000

08001384 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	@ (800141c <MX_TIM8_Init+0x98>)
 80013a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001420 <MX_TIM8_Init+0x9c>)
 80013a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <MX_TIM8_Init+0x98>)
 80013a8:	22b3      	movs	r2, #179	@ 0xb3
 80013aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_TIM8_Init+0x98>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_TIM8_Init+0x98>)
 80013b4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80013b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_TIM8_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_TIM8_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_TIM8_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013cc:	4813      	ldr	r0, [pc, #76]	@ (800141c <MX_TIM8_Init+0x98>)
 80013ce:	f001 ffeb 	bl	80033a8 <HAL_TIM_Base_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80013d8:	f7ff fe10 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <MX_TIM8_Init+0x98>)
 80013ea:	f002 fc29 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80013f4:	f7ff fe02 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013f8:	2320      	movs	r3, #32
 80013fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	@ (800141c <MX_TIM8_Init+0x98>)
 8001406:	f003 f8eb 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001410:	f7ff fdf4 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200001c0 	.word	0x200001c0
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1a      	ldr	r2, [pc, #104]	@ (800149c <HAL_TIM_PWM_MspInit+0x78>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12d      	bne.n	8001492 <HAL_TIM_PWM_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x7c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2018      	movs	r0, #24
 8001458:	f000 fcd5 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800145c:	2018      	movs	r0, #24
 800145e:	f000 fcee 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2019      	movs	r0, #25
 8001468:	f000 fccd 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800146c:	2019      	movs	r0, #25
 800146e:	f000 fce6 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201a      	movs	r0, #26
 8001478:	f000 fcc5 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800147c:	201a      	movs	r0, #26
 800147e:	f000 fcde 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2100      	movs	r1, #0
 8001486:	201b      	movs	r0, #27
 8001488:	f000 fcbd 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800148c:	201b      	movs	r0, #27
 800148e:	f000 fcd6 	bl	8001e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40010000 	.word	0x40010000
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <HAL_TIM_Encoder_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12b      	bne.n	800151e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_TIM_Encoder_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014fe:	2330      	movs	r3, #48	@ 0x30
 8001500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800150e:	2302      	movs	r3, #2
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <HAL_TIM_Encoder_MspInit+0x8c>)
 800151a:	f000 ff95 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800151e:	bf00      	nop
 8001520:	3728      	adds	r7, #40	@ 0x28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40000400 	.word	0x40000400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <HAL_TIM_Base_MspInit+0x80>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d116      	bne.n	8001574 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	6413      	str	r3, [r2, #64]	@ 0x40
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2036      	movs	r0, #54	@ 0x36
 8001568:	f000 fc4d 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800156c:	2036      	movs	r0, #54	@ 0x36
 800156e:	f000 fc66 	bl	8001e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001572:	e01a      	b.n	80015aa <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM8)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_TIM_Base_MspInit+0x88>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d115      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6453      	str	r3, [r2, #68]	@ 0x44
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_TIM_Base_MspInit+0x84>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	202c      	movs	r0, #44	@ 0x2c
 80015a0:	f000 fc31 	bl	8001e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80015a4:	202c      	movs	r0, #44	@ 0x2c
 80015a6:	f000 fc4a 	bl	8001e3e <HAL_NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40001000 	.word	0x40001000
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_TIM_MspPostInit+0x68>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11e      	bne.n	8001620 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001602:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <HAL_TIM_MspPostInit+0x70>)
 800161c:	f000 ff14 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40010000 	.word	0x40010000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001638:	f7ff fd84 	bl	8001144 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001662:	f003 f8cd 	bl	8004800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7ff fc07 	bl	8000e78 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800166c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001678:	08004888 	.word	0x08004888
  ldr r2, =_sbss
 800167c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001680:	2000020c 	.word	0x2000020c

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_Init+0x40>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_Init+0x40>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_Init+0x40>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 fb9d 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fca4 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fbb5 	bl	8001e5a <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 fb7d 	bl	8001e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20000008 	.word	0x20000008
 8001724:	20000010 	.word	0x20000010
 8001728:	2000000c 	.word	0x2000000c

0800172c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	@ (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000010 	.word	0x20000010
 8001750:	20000208 	.word	0x20000208

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000208 	.word	0x20000208

0800176c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e033      	b.n	80017ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fa36 	bl	8000bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017b2:	f023 0302 	bic.w	r3, r3, #2
 80017b6:	f043 0202 	orr.w	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f94a 	bl	8001a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f023 0303 	bic.w	r3, r3, #3
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80017da:	e001      	b.n	80017e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e113      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x244>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d925      	bls.n	800186c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1e      	subs	r3, #30
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	4603      	mov	r3, r0
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4403      	add	r3, r0
 800185e:	3b1e      	subs	r3, #30
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e022      	b.n	80018b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4403      	add	r3, r0
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d824      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
 8001902:	e04c      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b23      	subs	r3, #35	@ 0x23
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
 8001954:	e023      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b41      	subs	r3, #65	@ 0x41
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_ADC_ConfigChannel+0x250>)
 80019a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d10f      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d003      	beq.n	80019e8 <HAL_ADC_ConfigChannel+0x1f4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d122      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d111      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_ConfigChannel+0x25c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_ADC_ConfigChannel+0x260>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	10000012 	.word	0x10000012
 8001a50:	20000008 	.word	0x20000008
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <ADC_Init+0x1f0>)
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <ADC_Init+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00f      	b.n	8001b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0202 	bic.w	r2, r2, #2
 8001b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
 8001b70:	005a      	lsls	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	035a      	lsls	r2, r3, #13
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e007      	b.n	8001bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	051a      	lsls	r2, r3, #20
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40012300 	.word	0x40012300
 8001c4c:	0f000001 	.word	0x0f000001

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	db0b      	blt.n	8001cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	f003 021f 	and.w	r2, r3, #31
 8001ccc:	4907      	ldr	r1, [pc, #28]	@ (8001cec <__NVIC_EnableIRQ+0x38>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db0a      	blt.n	8001d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	490c      	ldr	r1, [pc, #48]	@ (8001d3c <__NVIC_SetPriority+0x4c>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	0112      	lsls	r2, r2, #4
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d18:	e00a      	b.n	8001d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4908      	ldr	r1, [pc, #32]	@ (8001d40 <__NVIC_SetPriority+0x50>)
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	3b04      	subs	r3, #4
 8001d28:	0112      	lsls	r2, r2, #4
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	761a      	strb	r2, [r3, #24]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000e100 	.word	0xe000e100
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f1c3 0307 	rsb	r3, r3, #7
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	bf28      	it	cs
 8001d62:	2304      	movcs	r3, #4
 8001d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d902      	bls.n	8001d74 <NVIC_EncodePriority+0x30>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b03      	subs	r3, #3
 8001d72:	e000      	b.n	8001d76 <NVIC_EncodePriority+0x32>
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43da      	mvns	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	401a      	ands	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	fa01 f303 	lsl.w	r3, r1, r3
 8001d96:	43d9      	mvns	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	4313      	orrs	r3, r2
         );
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dbc:	d301      	bcc.n	8001dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00f      	b.n	8001de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <SysTick_Config+0x40>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dca:	210f      	movs	r1, #15
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f7ff ff8e 	bl	8001cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <SysTick_Config+0x40>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <SysTick_Config+0x40>)
 8001ddc:	2207      	movs	r2, #7
 8001dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	e000e010 	.word	0xe000e010

08001df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff29 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e18:	f7ff ff3e 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f7ff ff8e 	bl	8001d44 <NVIC_EncodePriority>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff5d 	bl	8001cf0 <__NVIC_SetPriority>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff31 	bl	8001cb4 <__NVIC_EnableIRQ>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa2 	bl	8001dac <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e80:	f7ff fc68 	bl	8001754 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e099      	b.n	8001fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb0:	e00f      	b.n	8001ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb2:	f7ff fc4f 	bl	8001754 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d908      	bls.n	8001ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e078      	b.n	8001fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1e8      	bne.n	8001eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_DMA_Init+0x158>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d107      	bne.n	8001f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	4313      	orrs	r3, r2
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d117      	bne.n	8001f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f9e9 	bl	8002350 <DMA_CheckFifoParam>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f92:	2301      	movs	r3, #1
 8001f94:	e016      	b.n	8001fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9a0 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	223f      	movs	r2, #63	@ 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f010803f 	.word	0xf010803f

08001fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fdc:	4b8e      	ldr	r3, [pc, #568]	@ (8002218 <HAL_DMA_IRQHandler+0x248>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a8e      	ldr	r2, [pc, #568]	@ (800221c <HAL_DMA_IRQHandler+0x24c>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a9b      	lsrs	r3, r3, #10
 8001fe8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d01a      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d013      	beq.n	800203c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0204 	bic.w	r2, r2, #4
 8002022:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002028:	2208      	movs	r2, #8
 800202a:	409a      	lsls	r2, r3
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d012      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	2204      	movs	r2, #4
 8002078:	409a      	lsls	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002094:	2204      	movs	r2, #4
 8002096:	409a      	lsls	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f043 0204 	orr.w	r2, r3, #4
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ac:	2210      	movs	r2, #16
 80020ae:	409a      	lsls	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d043      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d03c      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	2210      	movs	r2, #16
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d018      	beq.n	8002112 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d108      	bne.n	8002100 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d024      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
 80020fe:	e01f      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
 8002110:	e016      	b.n	8002140 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d107      	bne.n	8002130 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0208 	bic.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	2220      	movs	r2, #32
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808f 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8087 	beq.w	8002270 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002166:	2220      	movs	r2, #32
 8002168:	409a      	lsls	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b05      	cmp	r3, #5
 8002178:	d136      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0216 	bic.w	r2, r2, #22
 8002188:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002198:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_DMA_IRQHandler+0x1da>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d007      	beq.n	80021ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021be:	223f      	movs	r2, #63	@ 0x3f
 80021c0:	409a      	lsls	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d07e      	beq.n	80022dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
        }
        return;
 80021e6:	e079      	b.n	80022dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01d      	beq.n	8002232 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10d      	bne.n	8002220 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002208:	2b00      	cmp	r3, #0
 800220a:	d031      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	4798      	blx	r3
 8002214:	e02c      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e01e      	b.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0210 	bic.w	r2, r2, #16
 800224e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d022      	beq.n	80022ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2205      	movs	r2, #5
 8002288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d307      	bcc.n	80022b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f2      	bne.n	800229c <HAL_DMA_IRQHandler+0x2cc>
 80022b6:	e000      	b.n	80022ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	4798      	blx	r3
 80022da:	e000      	b.n	80022de <HAL_DMA_IRQHandler+0x30e>
        return;
 80022dc:	bf00      	nop
    }
  }
}
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	@ (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	@ (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	@ 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	08004870 	.word	0x08004870

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	@ 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e165      	b.n	8002730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8154 	bne.w	800272a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ae 	beq.w	800272a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025de:	4b5a      	ldr	r3, [pc, #360]	@ (8002748 <HAL_GPIO_Init+0x300>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a58      	ldr	r2, [pc, #352]	@ (800274c <HAL_GPIO_Init+0x304>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	@ (8002750 <HAL_GPIO_Init+0x308>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4e      	ldr	r2, [pc, #312]	@ (8002754 <HAL_GPIO_Init+0x30c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4d      	ldr	r2, [pc, #308]	@ (8002758 <HAL_GPIO_Init+0x310>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4c      	ldr	r2, [pc, #304]	@ (800275c <HAL_GPIO_Init+0x314>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4b      	ldr	r2, [pc, #300]	@ (8002760 <HAL_GPIO_Init+0x318>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x20a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4a      	ldr	r2, [pc, #296]	@ (8002764 <HAL_GPIO_Init+0x31c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x206>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	@ (8002768 <HAL_GPIO_Init+0x320>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x202>
 8002646:	2306      	movs	r3, #6
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264a:	2307      	movs	r3, #7
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	@ (800274c <HAL_GPIO_Init+0x304>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b3a      	ldr	r3, [pc, #232]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a31      	ldr	r2, [pc, #196]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b2f      	ldr	r3, [pc, #188]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a26      	ldr	r2, [pc, #152]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fa:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002700:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002724:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae96 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	@ 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
 800277c:	4613      	mov	r3, r2
 800277e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002780:	787b      	ldrb	r3, [r7, #1]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800278c:	e003      	b.n	8002796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x90>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x90>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027be:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_PWREx_EnableOverDrive+0x90>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002838 <HAL_PWREx_EnableOverDrive+0x94>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027d0:	f7fe ffc0 	bl	8001754 <HAL_GetTick>
 80027d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027d6:	e009      	b.n	80027ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027d8:	f7fe ffbc 	bl	8001754 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027e6:	d901      	bls.n	80027ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e01f      	b.n	800282c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ec:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_PWREx_EnableOverDrive+0x98>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f8:	d1ee      	bne.n	80027d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027fa:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002800:	f7fe ffa8 	bl	8001754 <HAL_GetTick>
 8002804:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002806:	e009      	b.n	800281c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002808:	f7fe ffa4 	bl	8001754 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002816:	d901      	bls.n	800281c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e007      	b.n	800282c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800281c:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_PWREx_EnableOverDrive+0x98>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002828:	d1ee      	bne.n	8002808 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40023800 	.word	0x40023800
 8002838:	420e0040 	.word	0x420e0040
 800283c:	40007000 	.word	0x40007000
 8002840:	420e0044 	.word	0x420e0044

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0cc      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b68      	ldr	r3, [pc, #416]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d90c      	bls.n	8002880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b65      	ldr	r3, [pc, #404]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a58      	ldr	r2, [pc, #352]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d044      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b3f      	ldr	r3, [pc, #252]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3b      	ldr	r3, [pc, #236]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e067      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b37      	ldr	r3, [pc, #220]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4934      	ldr	r1, [pc, #208]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe ff0e 	bl	8001754 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe ff0a 	bl	8001754 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2b      	ldr	r3, [pc, #172]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d20c      	bcs.n	800298c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	@ (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fe6e 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08004860 	.word	0x08004860
 8002a08:	20000008 	.word	0x20000008
 8002a0c:	2000000c 	.word	0x2000000c

08002a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a14:	b0ae      	sub	sp, #184	@ 0xb8
 8002a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a36:	4bcb      	ldr	r3, [pc, #812]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
 8002a3e:	2b0c      	cmp	r3, #12
 8002a40:	f200 8204 	bhi.w	8002e4c <HAL_RCC_GetSysClockFreq+0x43c>
 8002a44:	a201      	add	r2, pc, #4	@ (adr r2, 8002a4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a4a:	bf00      	nop
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002e4d 	.word	0x08002e4d
 8002a54:	08002e4d 	.word	0x08002e4d
 8002a58:	08002e4d 	.word	0x08002e4d
 8002a5c:	08002a89 	.word	0x08002a89
 8002a60:	08002e4d 	.word	0x08002e4d
 8002a64:	08002e4d 	.word	0x08002e4d
 8002a68:	08002e4d 	.word	0x08002e4d
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002e4d 	.word	0x08002e4d
 8002a74:	08002e4d 	.word	0x08002e4d
 8002a78:	08002e4d 	.word	0x08002e4d
 8002a7c:	08002c81 	.word	0x08002c81
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4bb9      	ldr	r3, [pc, #740]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002a86:	e1e5      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a88:	4bb7      	ldr	r3, [pc, #732]	@ (8002d68 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a8e:	e1e1      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a90:	4bb4      	ldr	r3, [pc, #720]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a9c:	4bb1      	ldr	r3, [pc, #708]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d071      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa8:	4bae      	ldr	r3, [pc, #696]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	099b      	lsrs	r3, r3, #6
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ab4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ace:	4622      	mov	r2, r4
 8002ad0:	462b      	mov	r3, r5
 8002ad2:	f04f 0000 	mov.w	r0, #0
 8002ad6:	f04f 0100 	mov.w	r1, #0
 8002ada:	0159      	lsls	r1, r3, #5
 8002adc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae0:	0150      	lsls	r0, r2, #5
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	1a51      	subs	r1, r2, r1
 8002aea:	6439      	str	r1, [r7, #64]	@ 0x40
 8002aec:	4629      	mov	r1, r5
 8002aee:	eb63 0301 	sbc.w	r3, r3, r1
 8002af2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b00:	4649      	mov	r1, r9
 8002b02:	018b      	lsls	r3, r1, #6
 8002b04:	4641      	mov	r1, r8
 8002b06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0a:	4641      	mov	r1, r8
 8002b0c:	018a      	lsls	r2, r1, #6
 8002b0e:	4641      	mov	r1, r8
 8002b10:	1a51      	subs	r1, r2, r1
 8002b12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b14:	4649      	mov	r1, r9
 8002b16:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b28:	4649      	mov	r1, r9
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4641      	mov	r1, r8
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b42:	462b      	mov	r3, r5
 8002b44:	460a      	mov	r2, r1
 8002b46:	eb42 0303 	adc.w	r3, r2, r3
 8002b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b58:	4629      	mov	r1, r5
 8002b5a:	028b      	lsls	r3, r1, #10
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b62:	4621      	mov	r1, r4
 8002b64:	028a      	lsls	r2, r1, #10
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b78:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b7c:	f7fd fe4a 	bl	8000814 <__aeabi_uldivmod>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4613      	mov	r3, r2
 8002b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8a:	e067      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8c:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b98:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002baa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	1a51      	subs	r1, r2, r1
 8002bca:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002be0:	4649      	mov	r1, r9
 8002be2:	018b      	lsls	r3, r1, #6
 8002be4:	4641      	mov	r1, r8
 8002be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bea:	4641      	mov	r1, r8
 8002bec:	018a      	lsls	r2, r1, #6
 8002bee:	4641      	mov	r1, r8
 8002bf0:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c06:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0e:	4692      	mov	sl, r2
 8002c10:	469b      	mov	fp, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb1a 0303 	adds.w	r3, sl, r3
 8002c18:	623b      	str	r3, [r7, #32]
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	028b      	lsls	r3, r1, #10
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c38:	4621      	mov	r1, r4
 8002c3a:	028a      	lsls	r2, r1, #10
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c44:	2200      	movs	r2, #0
 8002c46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c48:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c4e:	f7fd fde1 	bl	8000814 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4613      	mov	r3, r2
 8002c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c7e:	e0e9      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c80:	4b38      	ldr	r3, [pc, #224]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8c:	4b35      	ldr	r3, [pc, #212]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d069      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c98:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ca2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cac:	2300      	movs	r3, #0
 8002cae:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cb0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	0159      	lsls	r1, r3, #5
 8002cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc6:	0150      	lsls	r0, r2, #5
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4621      	mov	r1, r4
 8002cce:	1a51      	subs	r1, r2, r1
 8002cd0:	61b9      	str	r1, [r7, #24]
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ce6:	4659      	mov	r1, fp
 8002ce8:	018b      	lsls	r3, r1, #6
 8002cea:	4651      	mov	r1, sl
 8002cec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cf0:	4651      	mov	r1, sl
 8002cf2:	018a      	lsls	r2, r1, #6
 8002cf4:	4651      	mov	r1, sl
 8002cf6:	ebb2 0801 	subs.w	r8, r2, r1
 8002cfa:	4659      	mov	r1, fp
 8002cfc:	eb63 0901 	sbc.w	r9, r3, r1
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d0c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d10:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4623      	mov	r3, r4
 8002d1a:	eb18 0303 	adds.w	r3, r8, r3
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	462b      	mov	r3, r5
 8002d22:	eb49 0303 	adc.w	r3, r9, r3
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d34:	4629      	mov	r1, r5
 8002d36:	028b      	lsls	r3, r1, #10
 8002d38:	4621      	mov	r1, r4
 8002d3a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d3e:	4621      	mov	r1, r4
 8002d40:	028a      	lsls	r2, r1, #10
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d50:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d54:	f7fd fd5e 	bl	8000814 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d62:	e063      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x41c>
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x454>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	2200      	movs	r2, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	4611      	mov	r1, r2
 8002d78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d7e:	2300      	movs	r3, #0
 8002d80:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d86:	4642      	mov	r2, r8
 8002d88:	464b      	mov	r3, r9
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	0159      	lsls	r1, r3, #5
 8002d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d98:	0150      	lsls	r0, r2, #5
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4641      	mov	r1, r8
 8002da0:	1a51      	subs	r1, r2, r1
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	4649      	mov	r1, r9
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002db8:	4659      	mov	r1, fp
 8002dba:	018b      	lsls	r3, r1, #6
 8002dbc:	4651      	mov	r1, sl
 8002dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc2:	4651      	mov	r1, sl
 8002dc4:	018a      	lsls	r2, r1, #6
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	1a54      	subs	r4, r2, r1
 8002dca:	4659      	mov	r1, fp
 8002dcc:	eb63 0501 	sbc.w	r5, r3, r1
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	00eb      	lsls	r3, r5, #3
 8002dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dde:	00e2      	lsls	r2, r4, #3
 8002de0:	4614      	mov	r4, r2
 8002de2:	461d      	mov	r5, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	18e3      	adds	r3, r4, r3
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	464b      	mov	r3, r9
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfe:	4629      	mov	r1, r5
 8002e00:	028b      	lsls	r3, r1, #10
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e08:	4621      	mov	r1, r4
 8002e0a:	028a      	lsls	r2, r1, #10
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e14:	2200      	movs	r2, #0
 8002e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e18:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e1e:	f7fd fcf9 	bl	8000814 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4613      	mov	r3, r2
 8002e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0x454>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0f1b      	lsrs	r3, r3, #28
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e4a:	e003      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	37b8      	adds	r7, #184	@ 0xb8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	00f42400 	.word	0x00f42400

08002e6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e28d      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8083 	beq.w	8002f92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e8c:	4b94      	ldr	r3, [pc, #592]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d019      	beq.n	8002ecc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e98:	4b91      	ldr	r3, [pc, #580]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ea4:	4b8e      	ldr	r3, [pc, #568]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eb0:	d00c      	beq.n	8002ecc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d112      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b88      	ldr	r3, [pc, #544]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ecc:	4b84      	ldr	r3, [pc, #528]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d05b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x124>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d157      	bne.n	8002f90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e25a      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x90>
 8002eee:	4b7c      	ldr	r3, [pc, #496]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7b      	ldr	r2, [pc, #492]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e01d      	b.n	8002f38 <HAL_RCC_OscConfig+0xcc>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0xb4>
 8002f06:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b73      	ldr	r3, [pc, #460]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a72      	ldr	r2, [pc, #456]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0xcc>
 8002f20:	4b6f      	ldr	r3, [pc, #444]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6e      	ldr	r2, [pc, #440]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6b      	ldr	r2, [pc, #428]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe fc08 	bl	8001754 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fe fc04 	bl	8001754 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	@ 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e21f      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	4b61      	ldr	r3, [pc, #388]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0xdc>
 8002f66:	e014      	b.n	8002f92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fbf4 	bl	8001754 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fbf0 	bl	8001754 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	@ 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e20b      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	4b57      	ldr	r3, [pc, #348]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x104>
 8002f8e:	e000      	b.n	8002f92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d06f      	beq.n	800307e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f9e:	4b50      	ldr	r3, [pc, #320]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002faa:	4b4d      	ldr	r3, [pc, #308]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fb2:	2b08      	cmp	r3, #8
 8002fb4:	d105      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d11c      	bne.n	8003008 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b44      	ldr	r3, [pc, #272]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d116      	bne.n	8003008 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fda:	4b41      	ldr	r3, [pc, #260]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x186>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d001      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e1d3      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4937      	ldr	r1, [pc, #220]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	e03a      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003010:	4b34      	ldr	r3, [pc, #208]	@ (80030e4 <HAL_RCC_OscConfig+0x278>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fb9d 	bl	8001754 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301e:	f7fe fb99 	bl	8001754 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e1b4      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b28      	ldr	r3, [pc, #160]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4925      	ldr	r1, [pc, #148]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
 8003050:	e015      	b.n	800307e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003052:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_RCC_OscConfig+0x278>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fb7c 	bl	8001754 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003060:	f7fe fb78 	bl	8001754 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e193      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f0      	bne.n	8003060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d036      	beq.n	80030f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_RCC_OscConfig+0x27c>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fb5c 	bl	8001754 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030a0:	f7fe fb58 	bl	8001754 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e173      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_OscConfig+0x274>)
 80030b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x234>
 80030be:	e01b      	b.n	80030f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <HAL_RCC_OscConfig+0x27c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c6:	f7fe fb45 	bl	8001754 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030cc:	e00e      	b.n	80030ec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ce:	f7fe fb41 	bl	8001754 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d907      	bls.n	80030ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e15c      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	42470000 	.word	0x42470000
 80030e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ec:	4b8a      	ldr	r3, [pc, #552]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ea      	bne.n	80030ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 8097 	beq.w	8003234 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003106:	2300      	movs	r3, #0
 8003108:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310a:	4b83      	ldr	r3, [pc, #524]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	4b7f      	ldr	r3, [pc, #508]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	4a7e      	ldr	r2, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003124:	6413      	str	r3, [r2, #64]	@ 0x40
 8003126:	4b7c      	ldr	r3, [pc, #496]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b79      	ldr	r3, [pc, #484]	@ (800331c <HAL_RCC_OscConfig+0x4b0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x4b0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x4b0>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe fb01 	bl	8001754 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe fafd 	bl	8001754 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e118      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b6c      	ldr	r3, [pc, #432]	@ (800331c <HAL_RCC_OscConfig+0x4b0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x31e>
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x358>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x340>
 8003192:	4b61      	ldr	r3, [pc, #388]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4a60      	ldr	r2, [pc, #384]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	@ 0x70
 800319e:	4b5e      	ldr	r3, [pc, #376]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x358>
 80031ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a59      	ldr	r2, [pc, #356]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	4b57      	ldr	r3, [pc, #348]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fac2 	bl	8001754 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe fabe 	bl	8001754 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0d7      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ee      	beq.n	80031d4 <HAL_RCC_OscConfig+0x368>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe faac 	bl	8001754 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe faa8 	bl	8001754 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e0c1      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	4b40      	ldr	r3, [pc, #256]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ee      	bne.n	8003200 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d105      	bne.n	8003234 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003228:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	4a3a      	ldr	r2, [pc, #232]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 80ad 	beq.w	8003398 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800323e:	4b36      	ldr	r3, [pc, #216]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d060      	beq.n	800330c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d145      	bne.n	80032de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b33      	ldr	r3, [pc, #204]	@ (8003320 <HAL_RCC_OscConfig+0x4b4>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fa7c 	bl	8001754 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fa78 	bl	8001754 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e093      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	019b      	lsls	r3, r3, #6
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	3b01      	subs	r3, #1
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	491b      	ldr	r1, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x4b4>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe fa4d 	bl	8001754 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032be:	f7fe fa49 	bl	8001754 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e064      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x452>
 80032dc:	e05c      	b.n	8003398 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_RCC_OscConfig+0x4b4>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fa36 	bl	8001754 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe fa32 	bl	8001754 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e04d      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <HAL_RCC_OscConfig+0x4ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x480>
 800330a:	e045      	b.n	8003398 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e040      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000
 8003320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003324:	4b1f      	ldr	r3, [pc, #124]	@ (80033a4 <HAL_RCC_OscConfig+0x538>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d030      	beq.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d129      	bne.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d122      	bne.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003354:	4013      	ands	r3, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800335a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335c:	4293      	cmp	r3, r2
 800335e:	d119      	bne.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	3b01      	subs	r3, #1
 800336e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d10f      	bne.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e041      	b.n	800343e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe f8b0 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f000 fd24 	bl	8003e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e041      	b.n	80034dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d106      	bne.n	8003472 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fd ffd9 	bl	8001424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 fcd5 	bl	8003e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d109      	bne.n	8003508 <HAL_TIM_PWM_Start+0x24>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	bf14      	ite	ne
 8003500:	2301      	movne	r3, #1
 8003502:	2300      	moveq	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e022      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d109      	bne.n	8003522 <HAL_TIM_PWM_Start+0x3e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b01      	cmp	r3, #1
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e015      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d109      	bne.n	800353c <HAL_TIM_PWM_Start+0x58>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b01      	cmp	r3, #1
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e008      	b.n	800354e <HAL_TIM_PWM_Start+0x6a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07c      	b.n	8003650 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start+0x82>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003564:	e013      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d104      	bne.n	8003576 <HAL_TIM_PWM_Start+0x92>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003574:	e00b      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d104      	bne.n	8003586 <HAL_TIM_PWM_Start+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003584:	e003      	b.n	800358e <HAL_TIM_PWM_Start+0xaa>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ff42 	bl	8004420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003658 <HAL_TIM_PWM_Start+0x174>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_TIM_PWM_Start+0xcc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2c      	ldr	r2, [pc, #176]	@ (800365c <HAL_TIM_PWM_Start+0x178>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_PWM_Start+0xd0>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <HAL_TIM_PWM_Start+0xd2>
 80035b4:	2300      	movs	r3, #0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a22      	ldr	r2, [pc, #136]	@ (8003658 <HAL_TIM_PWM_Start+0x174>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035dc:	d01d      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_TIM_PWM_Start+0x17c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_TIM_PWM_Start+0x180>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <HAL_TIM_PWM_Start+0x184>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a16      	ldr	r2, [pc, #88]	@ (800365c <HAL_TIM_PWM_Start+0x178>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a18      	ldr	r2, [pc, #96]	@ (800366c <HAL_TIM_PWM_Start+0x188>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIM_PWM_Start+0x136>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_TIM_PWM_Start+0x18c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b06      	cmp	r3, #6
 800362a:	d010      	beq.n	800364e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	e007      	b.n	800364e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40010000 	.word	0x40010000
 800365c:	40010400 	.word	0x40010400
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40014000 	.word	0x40014000
 8003670:	40001800 	.word	0x40001800

08003674 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e097      	b.n	80037b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fd ff01 	bl	80014a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036b8:	f023 0307 	bic.w	r3, r3, #7
 80036bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f000 fbb3 	bl	8003e34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f6:	f023 0303 	bic.w	r3, r3, #3
 80036fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	021b      	lsls	r3, r3, #8
 8003706:	4313      	orrs	r3, r2
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003714:	f023 030c 	bic.w	r3, r3, #12
 8003718:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003720:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	4313      	orrs	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	011a      	lsls	r2, r3, #4
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	031b      	lsls	r3, r3, #12
 8003744:	4313      	orrs	r3, r2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800375a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4313      	orrs	r3, r2
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d102      	bne.n	80037fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f6:	7b7b      	ldrb	r3, [r7, #13]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e069      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003810:	e031      	b.n	8003876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d110      	bne.n	800383a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003818:	7bbb      	ldrb	r3, [r7, #14]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d102      	bne.n	8003824 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800381e:	7b3b      	ldrb	r3, [r7, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d001      	beq.n	8003828 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e055      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003838:	e01d      	b.n	8003876 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003840:	7bbb      	ldrb	r3, [r7, #14]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003846:	7b7b      	ldrb	r3, [r7, #13]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800384c:	7b3b      	ldrb	r3, [r7, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e03e      	b.n	80038d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_TIM_Encoder_Start+0xc4>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b04      	cmp	r3, #4
 8003880:	d008      	beq.n	8003894 <HAL_TIM_Encoder_Start+0xd4>
 8003882:	e00f      	b.n	80038a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2201      	movs	r2, #1
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fdc7 	bl	8004420 <TIM_CCxChannelCmd>
      break;
 8003892:	e016      	b.n	80038c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2201      	movs	r2, #1
 800389a:	2104      	movs	r1, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fdbf 	bl	8004420 <TIM_CCxChannelCmd>
      break;
 80038a2:	e00e      	b.n	80038c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fdb7 	bl	8004420 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2201      	movs	r2, #1
 80038b8:	2104      	movs	r1, #4
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fdb0 	bl	8004420 <TIM_CCxChannelCmd>
      break;
 80038c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d020      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01b      	beq.n	8003940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0202 	mvn.w	r2, #2
 8003910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa65 	bl	8003df6 <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa57 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fa68 	bl	8003e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d020      	beq.n	800398c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01b      	beq.n	800398c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0204 	mvn.w	r2, #4
 800395c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa3f 	bl	8003df6 <HAL_TIM_IC_CaptureCallback>
 8003978:	e005      	b.n	8003986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa31 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa42 	bl	8003e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0208 	mvn.w	r2, #8
 80039a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2204      	movs	r2, #4
 80039ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa19 	bl	8003df6 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa0b 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fa1c 	bl	8003e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0210 	mvn.w	r2, #16
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2208      	movs	r2, #8
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f9f3 	bl	8003df6 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f9e5 	bl	8003de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9f6 	bl	8003e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d007      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0201 	mvn.w	r2, #1
 8003a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9c3 	bl	8003dce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fe92 	bl	8004790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9c7 	bl	8003e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0220 	mvn.w	r2, #32
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fe64 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0ae      	b.n	8003c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	f200 809f 	bhi.w	8003c28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003c29 	.word	0x08003c29
 8003af8:	08003c29 	.word	0x08003c29
 8003afc:	08003c29 	.word	0x08003c29
 8003b00:	08003b65 	.word	0x08003b65
 8003b04:	08003c29 	.word	0x08003c29
 8003b08:	08003c29 	.word	0x08003c29
 8003b0c:	08003c29 	.word	0x08003c29
 8003b10:	08003ba7 	.word	0x08003ba7
 8003b14:	08003c29 	.word	0x08003c29
 8003b18:	08003c29 	.word	0x08003c29
 8003b1c:	08003c29 	.word	0x08003c29
 8003b20:	08003be7 	.word	0x08003be7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fa2e 	bl	8003f8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0208 	orr.w	r2, r2, #8
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0204 	bic.w	r2, r2, #4
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6999      	ldr	r1, [r3, #24]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	619a      	str	r2, [r3, #24]
      break;
 8003b62:	e064      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa7e 	bl	800406c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6999      	ldr	r1, [r3, #24]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	021a      	lsls	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
      break;
 8003ba4:	e043      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 fad3 	bl	8004158 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0208 	orr.w	r2, r2, #8
 8003bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0204 	bic.w	r2, r2, #4
 8003bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69d9      	ldr	r1, [r3, #28]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	61da      	str	r2, [r3, #28]
      break;
 8003be4:	e023      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68b9      	ldr	r1, [r7, #8]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fb27 	bl	8004240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69d9      	ldr	r1, [r3, #28]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	61da      	str	r2, [r3, #28]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3718      	adds	r7, #24
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIM_ConfigClockSource+0x1c>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e0b4      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x186>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c94:	d03e      	beq.n	8003d14 <HAL_TIM_ConfigClockSource+0xd4>
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9a:	f200 8087 	bhi.w	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca2:	f000 8086 	beq.w	8003db2 <HAL_TIM_ConfigClockSource+0x172>
 8003ca6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003caa:	d87f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b70      	cmp	r3, #112	@ 0x70
 8003cae:	d01a      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d87b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b60      	cmp	r3, #96	@ 0x60
 8003cb6:	d050      	beq.n	8003d5a <HAL_TIM_ConfigClockSource+0x11a>
 8003cb8:	2b60      	cmp	r3, #96	@ 0x60
 8003cba:	d877      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b50      	cmp	r3, #80	@ 0x50
 8003cbe:	d03c      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xfa>
 8003cc0:	2b50      	cmp	r3, #80	@ 0x50
 8003cc2:	d873      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b40      	cmp	r3, #64	@ 0x40
 8003cc6:	d058      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0x13a>
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d86f      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d064      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b30      	cmp	r3, #48	@ 0x30
 8003cd2:	d86b      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d060      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d867      	bhi.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05c      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b10      	cmp	r3, #16
 8003ce2:	d05a      	beq.n	8003d9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	e062      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	f000 fb73 	bl	80043e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	609a      	str	r2, [r3, #8]
      break;
 8003d12:	e04f      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	f000 fb5c 	bl	80043e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d36:	609a      	str	r2, [r3, #8]
      break;
 8003d38:	e03c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	461a      	mov	r2, r3
 8003d48:	f000 fad0 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2150      	movs	r1, #80	@ 0x50
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb29 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8003d58:	e02c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	461a      	mov	r2, r3
 8003d68:	f000 faef 	bl	800434a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2160      	movs	r1, #96	@ 0x60
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fb19 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8003d78:	e01c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	461a      	mov	r2, r3
 8003d88:	f000 fab0 	bl	80042ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2140      	movs	r1, #64	@ 0x40
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fb09 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f000 fb00 	bl	80043aa <TIM_ITRx_SetConfig>
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a46      	ldr	r2, [pc, #280]	@ (8003f60 <TIM_Base_SetConfig+0x12c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e52:	d00f      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a43      	ldr	r2, [pc, #268]	@ (8003f64 <TIM_Base_SetConfig+0x130>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a42      	ldr	r2, [pc, #264]	@ (8003f68 <TIM_Base_SetConfig+0x134>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a41      	ldr	r2, [pc, #260]	@ (8003f6c <TIM_Base_SetConfig+0x138>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a40      	ldr	r2, [pc, #256]	@ (8003f70 <TIM_Base_SetConfig+0x13c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d108      	bne.n	8003e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <TIM_Base_SetConfig+0x12c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d02b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e94:	d027      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a32      	ldr	r2, [pc, #200]	@ (8003f64 <TIM_Base_SetConfig+0x130>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d023      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	@ (8003f68 <TIM_Base_SetConfig+0x134>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01f      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a30      	ldr	r2, [pc, #192]	@ (8003f6c <TIM_Base_SetConfig+0x138>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f70 <TIM_Base_SetConfig+0x13c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d017      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003f74 <TIM_Base_SetConfig+0x140>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f78 <TIM_Base_SetConfig+0x144>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00f      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	@ (8003f7c <TIM_Base_SetConfig+0x148>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00b      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8003f80 <TIM_Base_SetConfig+0x14c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d007      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f84 <TIM_Base_SetConfig+0x150>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a29      	ldr	r2, [pc, #164]	@ (8003f88 <TIM_Base_SetConfig+0x154>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d108      	bne.n	8003ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a10      	ldr	r2, [pc, #64]	@ (8003f60 <TIM_Base_SetConfig+0x12c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0xf8>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <TIM_Base_SetConfig+0x13c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d105      	bne.n	8003f52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f023 0201 	bic.w	r2, r3, #1
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	611a      	str	r2, [r3, #16]
  }
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40001800 	.word	0x40001800
 8003f84:	40001c00 	.word	0x40001c00
 8003f88:	40002000 	.word	0x40002000

08003f8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f023 0201 	bic.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 0302 	bic.w	r3, r3, #2
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <TIM_OC1_SetConfig+0xd8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC1_SetConfig+0x64>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <TIM_OC1_SetConfig+0xdc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10c      	bne.n	800400a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f023 0308 	bic.w	r3, r3, #8
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	@ (8004064 <TIM_OC1_SetConfig+0xd8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_OC1_SetConfig+0x8e>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <TIM_OC1_SetConfig+0xdc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40010000 	.word	0x40010000
 8004068:	40010400 	.word	0x40010400

0800406c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 0210 	bic.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0320 	bic.w	r3, r3, #32
 80040b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a22      	ldr	r2, [pc, #136]	@ (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_OC2_SetConfig+0x68>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a21      	ldr	r2, [pc, #132]	@ (8004154 <TIM_OC2_SetConfig+0xe8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d10d      	bne.n	80040f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a17      	ldr	r2, [pc, #92]	@ (8004150 <TIM_OC2_SetConfig+0xe4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_OC2_SetConfig+0x94>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <TIM_OC2_SetConfig+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d113      	bne.n	8004128 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800410e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40010400 	.word	0x40010400

08004158 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <TIM_OC3_SetConfig+0xe0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_OC3_SetConfig+0x66>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a20      	ldr	r2, [pc, #128]	@ (800423c <TIM_OC3_SetConfig+0xe4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10d      	bne.n	80041da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	021b      	lsls	r3, r3, #8
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <TIM_OC3_SetConfig+0xe0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC3_SetConfig+0x92>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a15      	ldr	r2, [pc, #84]	@ (800423c <TIM_OC3_SetConfig+0xe4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d113      	bne.n	8004212 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	621a      	str	r2, [r3, #32]
}
 800422c:	bf00      	nop
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010000 	.word	0x40010000
 800423c:	40010400 	.word	0x40010400

08004240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800428a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <TIM_OC4_SetConfig+0xa4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC4_SetConfig+0x68>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <TIM_OC4_SetConfig+0xa8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	019b      	lsls	r3, r3, #6
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 030a 	bic.w	r3, r3, #10
 8004328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	621a      	str	r2, [r3, #32]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800434a:	b480      	push	{r7}
 800434c:	b087      	sub	sp, #28
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004374:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	031b      	lsls	r3, r3, #12
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004386:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b085      	sub	sp, #20
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f043 0307 	orr.w	r3, r3, #7
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	431a      	orrs	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2201      	movs	r2, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	43db      	mvns	r3, r3
 8004442:	401a      	ands	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_TIMEx_PWMN_Start+0x24>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e022      	b.n	80044d6 <HAL_TIMEx_PWMN_Start+0x6a>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d109      	bne.n	80044aa <HAL_TIMEx_PWMN_Start+0x3e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	bf14      	ite	ne
 80044a2:	2301      	movne	r3, #1
 80044a4:	2300      	moveq	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e015      	b.n	80044d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d109      	bne.n	80044c4 <HAL_TIMEx_PWMN_Start+0x58>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	bf14      	ite	ne
 80044bc:	2301      	movne	r3, #1
 80044be:	2300      	moveq	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e008      	b.n	80044d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	bf14      	ite	ne
 80044d0:	2301      	movne	r3, #1
 80044d2:	2300      	moveq	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e06d      	b.n	80045ba <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <HAL_TIMEx_PWMN_Start+0x82>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044ec:	e013      	b.n	8004516 <HAL_TIMEx_PWMN_Start+0xaa>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d104      	bne.n	80044fe <HAL_TIMEx_PWMN_Start+0x92>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044fc:	e00b      	b.n	8004516 <HAL_TIMEx_PWMN_Start+0xaa>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b08      	cmp	r3, #8
 8004502:	d104      	bne.n	800450e <HAL_TIMEx_PWMN_Start+0xa2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800450c:	e003      	b.n	8004516 <HAL_TIMEx_PWMN_Start+0xaa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f940 	bl	80047a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004532:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a22      	ldr	r2, [pc, #136]	@ (80045c4 <HAL_TIMEx_PWMN_Start+0x158>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004546:	d01d      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_TIMEx_PWMN_Start+0x160>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1b      	ldr	r2, [pc, #108]	@ (80045d0 <HAL_TIMEx_PWMN_Start+0x164>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a1a      	ldr	r2, [pc, #104]	@ (80045d4 <HAL_TIMEx_PWMN_Start+0x168>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_TIMEx_PWMN_Start+0x118>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	@ (80045dc <HAL_TIMEx_PWMN_Start+0x170>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d111      	bne.n	80045a8 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b06      	cmp	r3, #6
 8004594:	d010      	beq.n	80045b8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a6:	e007      	b.n	80045b8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e05a      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004644:	d01d      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1d      	ldr	r2, [pc, #116]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1b      	ldr	r2, [pc, #108]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1a      	ldr	r2, [pc, #104]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a17      	ldr	r2, [pc, #92]	@ (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a15      	ldr	r2, [pc, #84]	@ (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40010400 	.word	0x40010400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40001800 	.word	0x40001800

080046d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e03d      	b.n	8004770 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	2204      	movs	r2, #4
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1a      	ldr	r2, [r3, #32]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	401a      	ands	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <memset>:
 80047ee:	4402      	add	r2, r0
 80047f0:	4603      	mov	r3, r0
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d100      	bne.n	80047f8 <memset+0xa>
 80047f6:	4770      	bx	lr
 80047f8:	f803 1b01 	strb.w	r1, [r3], #1
 80047fc:	e7f9      	b.n	80047f2 <memset+0x4>
	...

08004800 <__libc_init_array>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	4d0d      	ldr	r5, [pc, #52]	@ (8004838 <__libc_init_array+0x38>)
 8004804:	4c0d      	ldr	r4, [pc, #52]	@ (800483c <__libc_init_array+0x3c>)
 8004806:	1b64      	subs	r4, r4, r5
 8004808:	10a4      	asrs	r4, r4, #2
 800480a:	2600      	movs	r6, #0
 800480c:	42a6      	cmp	r6, r4
 800480e:	d109      	bne.n	8004824 <__libc_init_array+0x24>
 8004810:	4d0b      	ldr	r5, [pc, #44]	@ (8004840 <__libc_init_array+0x40>)
 8004812:	4c0c      	ldr	r4, [pc, #48]	@ (8004844 <__libc_init_array+0x44>)
 8004814:	f000 f818 	bl	8004848 <_init>
 8004818:	1b64      	subs	r4, r4, r5
 800481a:	10a4      	asrs	r4, r4, #2
 800481c:	2600      	movs	r6, #0
 800481e:	42a6      	cmp	r6, r4
 8004820:	d105      	bne.n	800482e <__libc_init_array+0x2e>
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	f855 3b04 	ldr.w	r3, [r5], #4
 8004828:	4798      	blx	r3
 800482a:	3601      	adds	r6, #1
 800482c:	e7ee      	b.n	800480c <__libc_init_array+0xc>
 800482e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004832:	4798      	blx	r3
 8004834:	3601      	adds	r6, #1
 8004836:	e7f2      	b.n	800481e <__libc_init_array+0x1e>
 8004838:	08004880 	.word	0x08004880
 800483c:	08004880 	.word	0x08004880
 8004840:	08004880 	.word	0x08004880
 8004844:	08004884 	.word	0x08004884

08004848 <_init>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	bf00      	nop
 800484c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484e:	bc08      	pop	{r3}
 8004850:	469e      	mov	lr, r3
 8004852:	4770      	bx	lr

08004854 <_fini>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr
